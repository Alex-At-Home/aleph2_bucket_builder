{
  "root": true,
  "label": "Template",
  "children": [
    {
      "root": false,
      "label": "Global Function",
      "element": {
        "enabled": true,
        "short_name": "a2_copy",
        "summary": "",
        "row": 0,
        "col": 1,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": false,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "js": "function(from, to) { \n  for (x in from) to[x] = from[x]; \n}"
        },
        "template": {
          "display_name": "Global Function",
          "form_info": "<p>Use unique keys as function names to declare global functions that the other templates in this file can use.</p> \n<p>No attempt is made to manage scope etc so use with care</p>",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "global_function",
          "categories": [
            "Developer"
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = {}; obj.key = template.element.short_name;  obj.global_function = { '$fn': template.element.form_model.js }; curr_obj.push(obj); return obj;}"
          },
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Function Name",
                "placeholder": "The function name (Give it a unique name)",
                "required": true
              }
            },
            {
              "key": "js",
              "type": "code_input",
              "templateOptions": {
                "label": "Global Function",
                "codemirror": {
                  "lineNumbers": true,
                  "smartIndent": true,
                  "mode": "javascript"
                }
              }
            }
          ],
          "default_model": {
            "js": "function(from, to) { \n  for (x in from) to[x] = from[x]; \n}"
          }
        }
      },
      "children": []
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Global Function",
        "summary": "<p>Use unique keys as function names to declare global functions that the other templates in this file can use.</p> \n<p>No attempt is made to manage scope etc so use with care</p>",
        "row": 0,
        "col": 0,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template",
          "expandable": false,
          "key": "global_function",
          "categories": "Developer"
        },
        "template": {
          "display_name": "Template Builder",
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "filters": [
            "Template"
          ],
          "expandable": true,
          "form_info": "Create a new template element",
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = {}; obj.display_name = template.element.short_name; obj.form_info = template.element.summary;a2_copy(template.element.form_model, obj);obj.categories = a2_csv_to_array(obj.categories);obj.filters = a2_csv_to_array(obj.filters);obj.child_filters = a2_csv_to_array(obj.child_filters);obj.schema = []; curr_obj.push(obj); return obj;}"
          },
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "defaultValue": "Template/template_builder/**",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ]
        }
      },
      "children": [
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "short_name": "Raw JSON",
            "summary": "",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Default Values",
          "element": {
            "enabled": true,
            "short_name": "Default fn name",
            "summary": "",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "{\n\t\"js\": \"function(args) {\\n  \\n}\"\n}"
            },
            "template": {
              "display_name": "Raw Default Values",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); }"
              },
              "default_model": {
                "json": "{\n\t\"js\": \"function(args) {\\n  \\n}\"\n}"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Model JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 1,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  curr_obj.key = template.element.short_name;\n  curr_obj.global_function = { '$fn': template.element.form_model.js };\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { curr_obj.building_function = {'$fn': template.element.form_model.pre_fn};curr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; }"
              },
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Global Function",
      "element": {
        "enabled": true,
        "short_name": "a2_csv_to_array",
        "summary": "",
        "row": 0,
        "col": 2,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": false,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "js": "function(csv) { \n  var x = (csv || '').replace(/\\s*,\\s*/g, \",\").split(\",\"); \n  var r = []; \n  for (i in x) if (x[i].length > 0) r.push(x[i]) ; \n  return (r.length > 0) ? r : undefined; \n}"
        },
        "template": {
          "display_name": "Global Function",
          "form_info": "<p>Use unique keys as function names to declare global functions that the other templates in this file can use.</p> \n<p>No attempt is made to manage scope etc so use with care</p>",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "global_function",
          "categories": [
            "Developer"
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = {}; obj.key = template.element.short_name;  obj.global_function = { '$fn': template.element.form_model.js }; curr_obj.push(obj); return obj;}"
          },
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Function Name",
                "placeholder": "The function name (Give it a unique name)",
                "required": true
              }
            },
            {
              "key": "js",
              "type": "code_input",
              "templateOptions": {
                "label": "Global Function",
                "codemirror": {
                  "lineNumbers": true,
                  "smartIndent": true,
                  "mode": "javascript"
                }
              }
            }
          ],
          "default_model": {
            "js": "function(from, to) { \n  for (x in from) to[x] = from[x]; \n}"
          }
        }
      },
      "children": []
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Builder Functions",
        "summary": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
        "row": 1,
        "col": 1,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template/template_builder",
          "expandable": false,
          "key": "local_function",
          "categories": "Developer"
        },
        "template": {
          "display_name": "Template Builder",
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "filters": [
            "Template"
          ],
          "expandable": true,
          "form_info": "Create a new template element",
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = {}; obj.display_name = template.element.short_name; obj.form_info = template.element.summary;a2_copy(template.element.form_model, obj);obj.categories = a2_csv_to_array(obj.categories);obj.filters = a2_csv_to_array(obj.filters);obj.child_filters = a2_csv_to_array(obj.child_filters);obj.schema = []; curr_obj.push(obj); return obj;}"
          },
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ]
        }
      },
      "children": [
        {
          "root": false,
          "label": "Raw Default Values",
          "element": {
            "enabled": true,
            "short_name": "Default Values",
            "summary": "",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "{\n\t\"pre_fn\": \"function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\\n  \\n}\",\n\t\"post_fn\": \"function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\\n  \\n}\"\n}"
            },
            "template": {
              "display_name": "Raw Default Values",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); }"
              },
              "default_model": {
                "json": "{\n\t\"pre_fn\": \"function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\\n  \\n}\",\n\t\"post_fn\": \"function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\\n  \\n}\"\n}"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Model JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "short_name": "Code Editors",
            "summary": "(raw json)",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[\n\t\t{\n\t\t\t\"key\": \"pre_fn\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Building Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n  ,\n\t\t{\n\t\t\t\"key\": \"post_fn\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"defaultValue\": \"{\\n}\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Post Building Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"pre_fn\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Building Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n  ,\n\t\t{\n\t\t\t\"key\": \"post_fn\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"defaultValue\": \"{\\n}\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Post Building Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 1,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { curr_obj.building_function = {'$fn': template.element.form_model.pre_fn};curr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; }"
              },
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Validation Functions",
        "summary": "<p>Write functions to validate the fields of the forms</p>\n<p>validation_function runs before the element's children; post_validation_function runs afterwards</p>",
        "row": 1,
        "col": 2,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template/template_builder",
          "expandable": false,
          "key": "local_function",
          "categories": "Developer"
        },
        "template": {
          "display_name": "Template Builder",
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "filters": [
            "Template"
          ],
          "expandable": true,
          "form_info": "Create a new template element",
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = {}; obj.display_name = template.element.short_name; obj.form_info = template.element.summary;a2_copy(template.element.form_model, obj);obj.categories = a2_csv_to_array(obj.categories);obj.filters = a2_csv_to_array(obj.filters);obj.child_filters = a2_csv_to_array(obj.child_filters);obj.schema = []; curr_obj.push(obj); return obj;}"
          },
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "defaultValue": "Template/template_builder/**",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ]
        }
      },
      "children": [
        {
          "root": false,
          "label": "Raw Default Values",
          "element": {
            "enabled": true,
            "short_name": "Default Values",
            "summary": "",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "{\n\t\"pre_fn\": \"function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\\n  \\n}\",\n\t\"post_fn\": \"function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\\n  \\n}\"\n}"
            },
            "template": {
              "display_name": "Raw Default Values",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); }"
              },
              "default_model": {
                "json": "{\n\t\"pre_fn\": \"function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\\n  \\n}\",\n\t\"post_fn\": \"function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\\n  \\n}\"\n}"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Model JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "short_name": "Code Editors",
            "summary": "(raw json)",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[\n\t\t{\n\t\t\t\"key\": \"pre_fn\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Validation Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n  ,\n\t\t{\n\t\t\t\"key\": \"post_fn\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"defaultValue\": \"{\\n}\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Post Validation Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"pre_fn\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Building Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n  ,\n\t\t{\n\t\t\t\"key\": \"post_fn\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"defaultValue\": \"{\\n}\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Post Building Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 1,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.validation_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_validation_function = {'$fn': template.element.form_model.post_fn}; \n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { curr_obj.building_function = {'$fn': template.element.form_model.pre_fn};curr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; }"
              },
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Template Builder",
        "summary": "Create a new template element",
        "row": 1,
        "col": 0,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template",
          "expandable": true,
          "key": "template_builder",
          "categories": "Template"
        },
        "template": {
          "display_name": "Template Builder",
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "filters": [
            "Template"
          ],
          "expandable": true,
          "form_info": "Create a new template element",
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = {}; obj.display_name = template.element.short_name; obj.form_info = template.element.summary;a2_copy(template.element.form_model, obj);obj.categories = a2_csv_to_array(obj.categories);obj.filters = a2_csv_to_array(obj.filters);obj.child_filters = a2_csv_to_array(obj.child_filters);obj.schema = []; curr_obj.push(obj); return obj;}"
          },
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "defaultValue": "Template/template_builder/**",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ]
        }
      },
      "children": [
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "short_name": "Raw Form JSON",
            "summary": "8 elements",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Template Name\",\n\t\t\t\t\"placeholder\": \"The template name\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"_summary\",\n\t\t\t\"type\": \"horizontalTextArea\",\n\t\t\t\"defaultValue\": \"<p>Help here</p>\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Form Info\",\n\t\t\t\t\"placeholder\": \"Text or HTML providing help for the user\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"key\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Role/Key\",\n\t\t\t\t\"placeholder\": \"The role name of the template (used in parent and child filters)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"sub_keys\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Sub-Role/Keys\",\n\t\t\t\t\"placeholder\": \"Optional sub-keys used only in child filters\",\n\t\t\t\t\"required\": false\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"categories\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Categories\",\n\t\t\t\t\"placeholder\": \"Comma-separated list of categories (determines folder name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"filters\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Parent Filters\",\n\t\t\t\t\"placeholder\": \"Comma-separated list of filters determining for which parents this should be displayed\",\n\t\t\t\t\"required\": false\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"expandable\",\n\t\t\t\"type\": \"horizontalCheckbox\",\n\t\t\t\"defaultValue\": false,\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Allow child elements\",\n\t\t\t\t\"required\": false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"key\": \"child_filters\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"hideExpression\": \"!model.expandable\", \n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Child Filters\",\n\t\t\t\t\"placeholder\": \"Comma-separated list of filters determining which child elements should be displayed\",\n\t\t\t\t\"required\": false\n\t\t\t}\t\t\t\n\t\t}\n]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n  {\n    \n  }\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Raw Default Values",
        "summary": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
        "row": 2,
        "col": 0,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template/template_builder",
          "expandable": false,
          "key": "template_element",
          "categories": "Generic"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "defaultValue": "Template/template_builder/**",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Raw Default Values",
          "element": {
            "enabled": true,
            "short_name": "Raw Default Values",
            "summary": "json",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "{\n\t\"json\": \"{\\n\\n}\"\n}"
            },
            "template": {
              "display_name": "Raw Default Values",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); }"
              },
              "default_model": {
                "json": "{\n\n}"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Model JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); \n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "short_name": "Raw Form JSON",
            "summary": "",
            "row": 1,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[\n\t\t{\n\t\t\t\"key\": \"json\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Model JSON\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n  {\n    \n  }\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Raw Form JSON",
        "summary": "Type raw JSON objects into here to insert them into the schema",
        "row": 2,
        "col": 2,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template/template_builder,Template/**/template_builder",
          "expandable": false,
          "key": "template_element",
          "categories": "Generic"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "defaultValue": "Template/template_builder/**",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "short_name": "Raw Form JSON",
            "summary": "",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[\n\t\t{\n\t\t\t\"key\": \"json\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Raw Form JSON\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n  {\n    \n  }\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Default Values",
          "element": {
            "enabled": true,
            "short_name": "Raw Default Values",
            "summary": "json",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "{\n\t\"json\": \"[\\n  {\\n    \\n  }\\n]\"\n}"
            },
            "template": {
              "display_name": "Raw Default Values",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); }"
              },
              "default_model": {
                "json": "{\n\n}"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Model JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 2,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar obj = eval('(' + template.element.form_model.json + ')'); \n \tfor (i in obj) curr_obj.schema.push(obj[i]); \n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Raw HTML builder",
        "summary": "Type Raw HTML into here to insert them into the schema",
        "row": 2,
        "col": 1,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template/template_builder,Template/template_builder/**",
          "expandable": false,
          "key": "template_element",
          "categories": "Layout"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "defaultValue": "Template/template_builder/**",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Raw Default Values",
          "element": {
            "enabled": true,
            "short_name": "Raw Default Values",
            "summary": "html",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "{\n  \"html\": \"\"\n}"
            },
            "template": {
              "display_name": "Raw Default Values",
              "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Model JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "{\n\n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "short_name": "Raw Form JSON",
            "summary": "",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[\n\t\t{\n\t\t\t\"key\": \"html\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"HTML template\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"htmlembedded\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "[\n  {\n    \n  }\n]"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar obj = eval('(' + template.element.form_model.json + ')'); \n \tfor (i in obj) curr_obj.schema.push(obj[i]); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 2,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.schema.push({template: template.element.form_model.html}); \n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Horizontal Line",
        "summary": "Insert horizontal line",
        "row": 3,
        "col": 0,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template/template_builder,Template/template_builder/**",
          "expandable": false,
          "key": "template_element",
          "categories": "Layout"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "defaultValue": "Template/template_builder/**",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Raw Default Values",
          "element": {
            "enabled": true,
            "short_name": "Raw Default Values",
            "summary": "html",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "{\n  \"html\": \"<hr/>\"\n}"
            },
            "template": {
              "display_name": "Raw Default Values",
              "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Model JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "{\n\n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "short_name": "Raw Form JSON",
            "summary": "",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[\n]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "[\n  {\n    \n  }\n]"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar obj = eval('(' + template.element.form_model.json + ')'); \n \tfor (i in obj) curr_obj.schema.push(obj[i]); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 2,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.schema.push({template: template.element.form_model.html}); \n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Repeating Section",
        "summary": "Create a sub-form under here",
        "row": 3,
        "col": 1,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template/template_builder,Template/template_builder/**",
          "expandable": true,
          "key": "template_builder",
          "categories": "Layout"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "defaultValue": "Template/template_builder/**",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Raw Default Values",
          "element": {
            "enabled": true,
            "short_name": "Raw Default Values",
            "summary": "key/type/btnText",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "{\n\t\t\"key\": \"ADD_KEY_HERE\",\n\t\t\"type\": \"repeatSection\",\n\t\t\"btnText\": \"Add\"\n}"
            },
            "template": {
              "display_name": "Raw Default Values",
              "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Model JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "{\n\n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n  var m = template.element.form_model;\n  var obj = { templateOptions: { schema: [] } }; \n  curr_obj.schema.push(obj); \n  obj.type = m.type; \n  obj.key = m.key; \n  obj.templateOptions.btnText = m.btnText;\n  return obj.templateOptions;   \n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar me = curr_obj.schema[curr_obj.schema.length-1]; \n  me.templateOptions.fields = me.templateOptions.schema;\n  me.templateOptions.schema = undefined;  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "short_name": "Raw Form JSON",
            "summary": "",
            "row": 0,
            "col": 2,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[\n\t\t{\n\t\t\t\"key\": \"key\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Key\",\n\t\t\t\t\"placeholder\": \"Enter a key for this repeater\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"btnText\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"defaultValue\": \"Add\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Add Button Name\",\n\t\t\t\t\"placeholder\": \"Enter the name for this button\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t}\t\t\n]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "[\n  {\n    \n  }\n]"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar obj = eval('(' + template.element.form_model.json + ')'); \n \tfor (i in obj) curr_obj.schema.push(obj[i]); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Row/Column Layout",
        "summary": "Add a row and define the layout of columns",
        "row": 3,
        "col": 2,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template/template_builder,Template/template_builder/**",
          "expandable": true,
          "key": "template_builder",
          "categories": "Layout"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "defaultValue": "Template/template_builder/**",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Raw Default Values",
          "element": {
            "enabled": true,
            "short_name": "Raw Default Values",
            "summary": "class",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "{\n\t\"class\": \"row\"\n}"
            },
            "template": {
              "display_name": "Raw Default Values",
              "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Model JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "{\n\n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n var m = template.element.form_model;\n var obj = { schema: [] }; \n curr_obj.schema.push(obj); \n obj.className = m.class; \n return obj; \n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var me = curr_obj.schema[curr_obj.schema.length-1]; \n  me.fieldGroup = me.schema;\n  me.schema = undefined;\n  if (template.element.form_model.columns) {\n    for (i in template.element.form_model.columns) {\n      var col = template.element.form_model.columns[i];\n      me.fieldGroup[i].className = 'col-xs-' + col;\n    }\n  }\n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Multi Dropdown",
          "element": {
            "enabled": true,
            "short_name": "Column widths (must add up to <= 12)",
            "summary": "",
            "row": 0,
            "col": 2,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "key": "columns",
              "options": [
                {
                  "name": "0",
                  "value": "0"
                },
                {
                  "name": "1",
                  "value": "1"
                },
                {
                  "name": "2",
                  "value": "2"
                },
                {
                  "name": "3",
                  "value": "3"
                },
                {
                  "name": "4",
                  "value": "4"
                },
                {
                  "name": "5",
                  "value": "5"
                },
                {
                  "name": "6",
                  "value": "6"
                },
                {
                  "name": "7",
                  "value": "7"
                },
                {
                  "name": "8",
                  "value": "8"
                },
                {
                  "name": "9",
                  "value": "9"
                },
                {
                  "name": "10",
                  "value": "10"
                },
                {
                  "name": "11",
                  "value": "11"
                }
              ]
            },
            "template": {
              "display_name": "Multi Dropdown",
              "form_info": "Variable sized list of dropdowns",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "simple_input",
              "categories": [
                "Selection"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                },
                {
                  "className": "section-label",
                  "template": "<hr /><div><strong>Dropdown Elements:</strong></div>"
                },
                {
                  "templateOptions": {
                    "btnText": "Add",
                    "fields": [
                      {
                        "templateOptions": {
                          "required": true,
                          "label": "Name",
                          "placeholder": "The display name associated with the dropdown value"
                        },
                        "key": "name",
                        "type": "horizontalInput"
                      },
                      {
                        "templateOptions": {
                          "required": true,
                          "pattern": "[a-zA-Z0-9_]+",
                          "label": "Value",
                          "placeholder": "The key for the selected dropdown element"
                        },
                        "key": "value",
                        "type": "horizontalInput"
                      }
                    ]
                  },
                  "type": "repeatSection",
                  "key": "options"
                }
              ],
              "default_model": {
                "key": "TODO_KEY"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { type: 'multiInput', templateOptions: { inputOptions: { type: 'select', templateOptions: {} } } };\n  obj.key = template.element.form_model.key;\n  obj.templateOptions.label = template.element.short_name; \n  obj.templateOptions.inputOptions.templateOptions.options = template.element.form_model.options;\n  curr_obj.schema.push(obj)\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Show/Hide Section",
        "summary": "The children of this section are hidden based on a JS/AngularJS expression - other variables in the format are available in the model object (eg key thisCheckbox is accessed via \"model.thisCheckbox\")",
        "row": 3,
        "col": 3,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template/template_builder,Template/**/template_builder",
          "expandable": true,
          "key": "template_builder",
          "categories": "Layout"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "defaultValue": "Template/template_builder/**",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { hideExpression: template.element.form_model.hideExpression, schema: [] };\n  curr_obj.schema.push(obj);\n  return obj;\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var me = curr_obj.schema[curr_obj.schema.length - 1];\n  me.fieldGroup = me.schema;\n  me.schema = undefined;\n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Default Values",
          "element": {
            "enabled": true,
            "short_name": "Raw Default Values",
            "summary": "hideExpression",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "{\n\t\"hideExpression\": \"false\"\n}"
            },
            "template": {
              "display_name": "Raw Default Values",
              "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Model JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "{\n\n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "2-Line Input",
          "element": {
            "enabled": true,
            "short_name": "Expression returning true to hide the section",
            "summary": "Enter a JS expression into here to determine when the elements in this section should be visible",
            "row": 0,
            "col": 2,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "type": "input",
              "key": "hideExpression",
              "required": true
            },
            "template": {
              "display_name": "2-Line Input",
              "form_info": "Text input element with label on the line above",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "simple_input",
              "categories": [
                "Text"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "_summary",
                  "type": "horizontalTextArea",
                  "templateOptions": {
                    "label": "Placeholder",
                    "placeholder": "The placeholder text displayed when the input is empty",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                },
                {
                  "key": "required",
                  "type": "horizontalCheckbox",
                  "templateOptions": {
                    "label": "Is this element required?"
                  }
                },
                {
                  "key": "pattern",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Pattern",
                    "placeholder": "Optional validation regular expression",
                    "required": false
                  }
                }
              ],
              "default_model": {
                "type": "input",
                "key": "TODO_KEY"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Horizontal Input",
        "summary": "Compact text input element",
        "row": 4,
        "col": 0,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template/template_builder,Template/template_builder/**",
          "expandable": false,
          "key": "simple_input",
          "categories": "Text"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "defaultValue": "Template/template_builder/**",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "short_name": "Input JSON",
            "summary": "",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Label\",\n\t\t\t\t\"placeholder\": \"The label displayed next to the input\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"key\": \"_summary\",\n\t\t\t\"type\": \"horizontalTextArea\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Placeholder\",\n\t\t\t\t\"placeholder\": \"The placeholder text displayed when the input is empty\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"key\": \"key\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Key\",\n              \t\"pattern\": \"[a-zA-Z0-9_]+\",\n\t\t\t\t\"placeholder\": \"The key for this input\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t},\n  \t\t{\n          \t\"key\": \"required\",\n          \t\"type\": \"horizontalCheckbox\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Is this element required?\"\n            }\n        },\n\t\t{\n\t\t\t\"key\": \"pattern\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Pattern\",\n\t\t\t\t\"placeholder\": \"Optional validation regular expression\",\n\t\t\t\t\"required\": false\n\t\t\t}\n\t\t}\n]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "[\n  {\n    \n  }\n]"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar obj = eval('(' + template.element.form_model.json + ')'); \n \tfor (i in obj) curr_obj.schema.push(obj[i]); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Default Values",
          "element": {
            "enabled": true,
            "short_name": "Raw Default Values",
            "summary": "",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "{\n  \t\"type\": \"horizontalInput\",\n\t\"key\": \"TODO_KEY\"\n}"
            },
            "template": {
              "display_name": "Raw Default Values",
              "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Model JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "{\n\n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 2,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Horizontal Checkbox",
        "summary": "Compact checkbox input element",
        "row": 4,
        "col": 1,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template/template_builder,Template/template_builder/**",
          "expandable": false,
          "key": "simple_input",
          "categories": "Selection"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "defaultValue": "Template/template_builder/**",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "short_name": "Input JSON",
            "summary": "",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Label\",\n\t\t\t\t\"placeholder\": \"The label displayed next to the input\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"key\": \"key\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Key\",\n              \t\"pattern\": \"[a-zA-Z0-9_]+\",\n\t\t\t\t\"placeholder\": \"The key for this input\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t}\n]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "[\n  {\n    \n  }\n]"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar obj = eval('(' + template.element.form_model.json + ')'); \n \tfor (i in obj) curr_obj.schema.push(obj[i]); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Default Values",
          "element": {
            "enabled": true,
            "short_name": "Raw Default Values",
            "summary": "",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "{\n  \t\"type\": \"horizontalCheckbox\",\n\t\"key\": \"TODO_KEY\"\n}"
            },
            "template": {
              "display_name": "Raw Default Values",
              "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Model JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "{\n\n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 2,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.type = template.element.form_model.type; \n  obj.key = template.element.form_model.key;\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Horizontal Text Area",
        "summary": "Compact text area input element",
        "row": 4,
        "col": 2,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template/template_builder,Template/template_builder/**",
          "expandable": false,
          "key": "simple_input",
          "categories": "Text"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "defaultValue": "Template/template_builder/**",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "short_name": "Input JSON",
            "summary": "",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Label\",\n\t\t\t\t\"placeholder\": \"The label displayed next to the input\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"key\": \"_summary\",\n\t\t\t\"type\": \"horizontalTextArea\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Placeholder\",\n\t\t\t\t\"placeholder\": \"The placeholder text displayed when the input is empty\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"key\": \"key\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Key\",\n              \t\"pattern\": \"[a-zA-Z0-9_]+\",\n\t\t\t\t\"placeholder\": \"The key for this input\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t},\n  \t\t{\n          \t\"key\": \"required\",\n          \t\"type\": \"horizontalCheckbox\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Is this element required?\"\n            }\n        }\n]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "[\n  {\n    \n  }\n]"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar obj = eval('(' + template.element.form_model.json + ')'); \n \tfor (i in obj) curr_obj.schema.push(obj[i]); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Default Values",
          "element": {
            "enabled": true,
            "short_name": "Raw Default Values",
            "summary": "",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "{\n  \t\"type\": \"horizontalTextArea\",\n\t\"key\": \"TODO_KEY\"\n}"
            },
            "template": {
              "display_name": "Raw Default Values",
              "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Model JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "{\n\n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 2,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  if (template.element.form_model.rows) obj.templateOptions.rows = parseInt(template.element.form_model.rows);\n  obj.templateOptions.required = (true === template.element.form_model.required);\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Horizontal Input",
          "element": {
            "enabled": false,
            "short_name": "Number of rows",
            "summary": "(TODO not applied, fault with directive?) Override the starting number of rows",
            "row": 0,
            "col": 3,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "type": "horizontalInput",
              "key": "rows",
              "pattern": "[0-9]+"
            },
            "template": {
              "display_name": "Horizontal Input",
              "form_info": "Compact text input element",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "simple_input",
              "categories": [
                "Text"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "_summary",
                  "type": "horizontalTextArea",
                  "templateOptions": {
                    "label": "Placeholder",
                    "placeholder": "The placeholder text displayed when the input is empty",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                },
                {
                  "key": "required",
                  "type": "horizontalCheckbox",
                  "templateOptions": {
                    "label": "Is this element required?"
                  }
                },
                {
                  "key": "pattern",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Pattern",
                    "placeholder": "Optional validation regular expression",
                    "required": false
                  }
                }
              ],
              "default_model": {
                "type": "horizontalInput",
                "key": "TODO_KEY"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Horizontal Dropdown",
        "summary": "Compact dropdown element",
        "row": 4,
        "col": 3,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template/template_builder,Template/template_builder/**",
          "expandable": false,
          "key": "simple_input",
          "categories": "Selection"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "defaultValue": "Template/template_builder/**",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "short_name": "Input JSON",
            "summary": "",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Label\",\n\t\t\t\t\"placeholder\": \"The label displayed next to the input\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"key\": \"key\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Key\",\n              \t\"pattern\": \"[a-zA-Z0-9_]+\",\n\t\t\t\t\"placeholder\": \"The key for this input\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"key\": \"required\",\n\t\t\t\"type\": \"horizontalCheckbox\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Is this element required?\"\n\t\t\t}\n\t\t}\n]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "[\n  {\n    \n  }\n]"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar obj = eval('(' + template.element.form_model.json + ')'); \n \tfor (i in obj) curr_obj.schema.push(obj[i]); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Default Values",
          "element": {
            "enabled": true,
            "short_name": "Raw Default Values",
            "summary": "",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "{\n  \t\"type\": \"horizontalSelect\",\n\t\"key\": \"TODO_KEY\"\n}"
            },
            "template": {
              "display_name": "Raw Default Values",
              "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Model JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "{\n\n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 2,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.type = template.element.form_model.type; \n  obj.key = template.element.form_model.key;\n  obj.templateOptions.required = (true === template.element.form_model.required);\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.options = template.element.form_model.options;\n  curr_obj.schema.push(obj)\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Repeating Section",
          "element": {
            "enabled": true,
            "short_name": "Dropdown Elements",
            "summary": "",
            "row": 2,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": true,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "key": "options",
              "type": "repeatSection",
              "btnText": "Add"
            },
            "template": {
              "display_name": "Repeating Section",
              "form_info": "Create a sub-form under here",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": true,
              "key": "template_builder",
              "categories": [
                "Layout"
              ],
              "schema": [
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "placeholder": "Enter a key for this repeater",
                    "required": true
                  }
                },
                {
                  "key": "btnText",
                  "type": "horizontalInput",
                  "defaultValue": "Add",
                  "templateOptions": {
                    "label": "Add Button Name",
                    "placeholder": "Enter the name for this button",
                    "required": true
                  }
                }
              ],
              "default_model": {
                "key": "ADD_KEY_HERE",
                "type": "repeatSection",
                "btnText": "Add"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n  var m = template.element.form_model;\n  var obj = { templateOptions: { schema: [] } }; \n  curr_obj.schema.push(obj); \n  obj.type = m.type; \n  obj.key = m.key; \n  obj.templateOptions.btnText = m.btnText;\n  return obj.templateOptions;   \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar me = curr_obj.schema[curr_obj.schema.length-1]; \n  me.templateOptions.fields = me.templateOptions.schema;\n  me.templateOptions.schema = undefined;  \n}"
              }
            }
          },
          "children": [
            {
              "root": false,
              "label": "Horizontal Input",
              "element": {
                "enabled": true,
                "short_name": "Name",
                "summary": "The display name associated with the dropdown value",
                "row": 0,
                "col": 0,
                "sizeX": 1,
                "sizeY": 1,
                "expandable": false,
                "configurable": true,
                "deletable": true,
                "form_model": {
                  "type": "horizontalInput",
                  "key": "name",
                  "pattern": "",
                  "required": true
                },
                "template": {
                  "display_name": "Horizontal Input",
                  "form_info": "Compact text input element",
                  "filters": [
                    "Template/template_builder",
                    "Template/template_builder/**"
                  ],
                  "expandable": false,
                  "key": "simple_input",
                  "categories": [
                    "Text"
                  ],
                  "schema": [
                    {
                      "key": "_short_name",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Label",
                        "placeholder": "The label displayed next to the input",
                        "required": true
                      }
                    },
                    {
                      "key": "_summary",
                      "type": "horizontalTextArea",
                      "templateOptions": {
                        "label": "Placeholder",
                        "placeholder": "The placeholder text displayed when the input is empty",
                        "required": true
                      }
                    },
                    {
                      "key": "key",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Key",
                        "pattern": "[a-zA-Z0-9_]+",
                        "placeholder": "The key for this input",
                        "required": true
                      }
                    },
                    {
                      "key": "required",
                      "type": "horizontalCheckbox",
                      "templateOptions": {
                        "label": "Is this element required?"
                      }
                    },
                    {
                      "key": "pattern",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Pattern",
                        "placeholder": "Optional validation regular expression",
                        "required": false
                      }
                    }
                  ],
                  "default_model": {
                    "type": "horizontalInput",
                    "key": "TODO_KEY"
                  },
                  "building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
                  },
                  "post_building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
                  }
                }
              },
              "children": []
            },
            {
              "root": false,
              "label": "Horizontal Input",
              "element": {
                "enabled": true,
                "short_name": "Value",
                "summary": "The key for the selected dropdown element",
                "row": 0,
                "col": 1,
                "sizeX": 1,
                "sizeY": 1,
                "expandable": false,
                "configurable": true,
                "deletable": true,
                "form_model": {
                  "type": "horizontalInput",
                  "key": "value",
                  "required": true,
                  "pattern": "[a-zA-Z0-9_]+"
                },
                "template": {
                  "display_name": "Horizontal Input",
                  "form_info": "Compact text input element",
                  "filters": [
                    "Template/template_builder",
                    "Template/template_builder/**"
                  ],
                  "expandable": false,
                  "key": "simple_input",
                  "categories": [
                    "Text"
                  ],
                  "schema": [
                    {
                      "key": "_short_name",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Label",
                        "placeholder": "The label displayed next to the input",
                        "required": true
                      }
                    },
                    {
                      "key": "_summary",
                      "type": "horizontalTextArea",
                      "templateOptions": {
                        "label": "Placeholder",
                        "placeholder": "The placeholder text displayed when the input is empty",
                        "required": true
                      }
                    },
                    {
                      "key": "key",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Key",
                        "pattern": "[a-zA-Z0-9_]+",
                        "placeholder": "The key for this input",
                        "required": true
                      }
                    },
                    {
                      "key": "required",
                      "type": "horizontalCheckbox",
                      "templateOptions": {
                        "label": "Is this element required?"
                      }
                    },
                    {
                      "key": "pattern",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Pattern",
                        "placeholder": "Optional validation regular expression",
                        "required": false
                      }
                    }
                  ],
                  "default_model": {
                    "type": "horizontalInput",
                    "key": "TODO_KEY"
                  },
                  "building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
                  },
                  "post_building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "root": false,
          "label": "Section header",
          "element": {
            "enabled": true,
            "short_name": "Dropdown Elements:",
            "summary": "",
            "row": 1,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {},
            "template": {
              "display_name": "Section header",
              "form_info": "Provides a section header",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Layout"
              ],
              "schema": [
                {
                  "templateOptions": {
                    "required": true,
                    "label": "Horizontal Input",
                    "placeholder": "The section header title (in HTML)"
                  },
                  "key": "_short_name",
                  "type": "horizontalInput"
                }
              ],
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  obj = { \n    \"className\": \"section-label\",\n    \"template\": \"<hr /><div><strong>\" + template.element.short_name + \"</strong></div>\"    \n        };\n  curr_obj.schema.push(obj);\n  \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Section header",
        "summary": "Provides a section header",
        "row": 3,
        "col": 4,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template/template_builder,Template/template_builder/**",
          "expandable": false,
          "key": "template_element",
          "categories": "Layout"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "defaultValue": "Template/template_builder/**",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Horizontal Input",
          "element": {
            "enabled": true,
            "short_name": "Horizontal Input",
            "summary": "The section header title (in HTML)",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "type": "horizontalInput",
              "key": "_short_name",
              "required": true
            },
            "template": {
              "display_name": "Horizontal Input",
              "form_info": "Compact text input element",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "simple_input",
              "categories": [
                "Text"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "_summary",
                  "type": "horizontalTextArea",
                  "templateOptions": {
                    "label": "Placeholder",
                    "placeholder": "The placeholder text displayed when the input is empty",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                },
                {
                  "key": "required",
                  "type": "horizontalCheckbox",
                  "templateOptions": {
                    "label": "Is this element required?"
                  }
                },
                {
                  "key": "pattern",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Pattern",
                    "placeholder": "Optional validation regular expression",
                    "required": false
                  }
                }
              ],
              "default_model": {
                "type": "horizontalInput",
                "key": "TODO_KEY"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  obj = { \n    \"className\": \"section-label\",\n    \"template\": \"<hr /><div><strong>\" + template.element.short_name + \"</strong></div>\"    \n        };\n  curr_obj.schema.push(obj);\n  \n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Code Editor",
        "summary": "Write code in various languages (or JSON/XML/HTML)",
        "row": 5,
        "col": 0,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template/template_builder,Template/template_builder/**",
          "expandable": false,
          "key": "simple_input",
          "categories": "Text"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "defaultValue": "Template/template_builder/**",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "short_name": "Form JSON",
            "summary": "",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Label\",\n\t\t\t\t\"placeholder\": \"The label displayed next to the input\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"key\": \"key\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Key\",\n              \t\"pattern\": \"[a-zA-Z0-9_]+\",\n\t\t\t\t\"placeholder\": \"The key for this input\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t},\n  \t\t{\n          \t\"key\": \"required\",\n          \t\"type\": \"horizontalCheckbox\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Is this element required?\"\n            }\n        }\n]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "[\n  {\n    \n  }\n]"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar obj = eval('(' + template.element.form_model.json + ')'); \n \tfor (i in obj) curr_obj.schema.push(obj[i]); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Horizontal Dropdown",
          "element": {
            "enabled": true,
            "short_name": "Language",
            "summary": "",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "type": "horizontalSelect",
              "key": "mode",
              "options": [
                {
                  "value": "clike",
                  "name": "Scala"
                },
                {
                  "value": "javascript",
                  "name": "Javascript/JSON"
                },
                {
                  "value": "r",
                  "name": "R"
                },
                {
                  "value": "python",
                  "name": "Python"
                },
                {
                  "value": "xml",
                  "name": "XML"
                },
                {
                  "value": "lua",
                  "name": "Lua"
                },
                {
                  "value": "yaml",
                  "name": "YAML"
                },
                {
                  "value": "properties",
                  "name": "Properties"
                },
                {
                  "value": "htmlembedded",
                  "name": "HTML (embedded)"
                },
                {
                  "value": "htmlmixed",
                  "name": "HTML (mixed)"
                }
              ],
              "required": true
            },
            "template": {
              "display_name": "Horizontal Dropdown",
              "form_info": "Compact dropdown element",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "simple_input",
              "categories": [
                "Selection"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                },
                {
                  "key": "required",
                  "type": "horizontalCheckbox",
                  "templateOptions": {
                    "label": "Is this element required?"
                  }
                },
                {
                  "className": "section-label",
                  "template": "<hr /><div><strong>Dropdown Elements:</strong></div>"
                },
                {
                  "templateOptions": {
                    "btnText": "Add",
                    "fields": [
                      {
                        "templateOptions": {
                          "required": true,
                          "pattern": "[a-zA-Z0-9_]+",
                          "label": "Name",
                          "placeholder": "The key associated with the dropdown value"
                        },
                        "key": "name",
                        "type": "horizontalInput"
                      },
                      {
                        "templateOptions": {
                          "required": true,
                          "label": "Value",
                          "placeholder": "The displayed value in the dropdown"
                        },
                        "key": "value",
                        "type": "horizontalInput"
                      }
                    ]
                  },
                  "type": "repeatSection",
                  "key": "options"
                }
              ],
              "default_model": {
                "type": "horizontalSelect",
                "key": "TODO_KEY"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.type = template.element.form_model.type; \n  obj.key = template.element.form_model.key;\n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.options = template.element.form_model.options;\n  curr_obj.schema.push(obj)\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Default Values",
          "element": {
            "enabled": true,
            "short_name": "Raw Default Values",
            "summary": "",
            "row": 0,
            "col": 2,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "{\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true\n\t\t\t\t}\n\t\t\t}\n}"
            },
            "template": {
              "display_name": "Raw Default Values",
              "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Model JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "{\n\n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 3,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { \n    key: template.element.form_model.key,\n    type: template.element.form_model.type,\n    templateOptions: template.element.form_model.templateOptions \n  };\n  obj.templateOptions.codemirror.mode = template.element.form_model.mode;\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.required = template.element.form_model.required;\n  curr_obj.schema.push(obj);\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Multi Dropdown",
        "summary": "Variable sized list of dropdowns",
        "row": 5,
        "col": 2,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template/template_builder,Template/template_builder/**",
          "expandable": false,
          "key": "simple_input",
          "categories": "Selection"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "defaultValue": "Template/template_builder/**",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "short_name": "Input JSON",
            "summary": "",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Label\",\n\t\t\t\t\"placeholder\": \"The label displayed next to the input\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"key\": \"key\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Key\",\n              \t\"pattern\": \"[a-zA-Z0-9_]+\",\n\t\t\t\t\"placeholder\": \"The key for this input\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t}\n]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "[\n  {\n    \n  }\n]"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar obj = eval('(' + template.element.form_model.json + ')'); \n \tfor (i in obj) curr_obj.schema.push(obj[i]); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Default Values",
          "element": {
            "enabled": true,
            "short_name": "Raw Default Values",
            "summary": "",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "{\n\t\"key\": \"TODO_KEY\"\n}"
            },
            "template": {
              "display_name": "Raw Default Values",
              "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Model JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "{\n\n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 2,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { type: 'multiInput', templateOptions: { inputOptions: { type: 'select', templateOptions: {} } } };\n  obj.key = template.element.form_model.key;\n  obj.templateOptions.label = template.element.short_name; \n  obj.templateOptions.inputOptions.templateOptions.options = template.element.form_model.options;\n  curr_obj.schema.push(obj)\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Repeating Section",
          "element": {
            "enabled": true,
            "short_name": "Dropdown Elements",
            "summary": "",
            "row": 2,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": true,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "key": "options",
              "type": "repeatSection",
              "btnText": "Add"
            },
            "template": {
              "display_name": "Repeating Section",
              "form_info": "Create a sub-form under here",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": true,
              "key": "template_builder",
              "categories": [
                "Layout"
              ],
              "schema": [
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "placeholder": "Enter a key for this repeater",
                    "required": true
                  }
                },
                {
                  "key": "btnText",
                  "type": "horizontalInput",
                  "defaultValue": "Add",
                  "templateOptions": {
                    "label": "Add Button Name",
                    "placeholder": "Enter the name for this button",
                    "required": true
                  }
                }
              ],
              "default_model": {
                "key": "ADD_KEY_HERE",
                "type": "repeatSection",
                "btnText": "Add"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n  var m = template.element.form_model;\n  var obj = { templateOptions: { schema: [] } }; \n  curr_obj.schema.push(obj); \n  obj.type = m.type; \n  obj.key = m.key; \n  obj.templateOptions.btnText = m.btnText;\n  return obj.templateOptions;   \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar me = curr_obj.schema[curr_obj.schema.length-1]; \n  me.templateOptions.fields = me.templateOptions.schema;\n  me.templateOptions.schema = undefined;  \n}"
              }
            }
          },
          "children": [
            {
              "root": false,
              "label": "Horizontal Input",
              "element": {
                "enabled": true,
                "short_name": "Name",
                "summary": "The display name associated with the dropdown value",
                "row": 0,
                "col": 0,
                "sizeX": 1,
                "sizeY": 1,
                "expandable": false,
                "configurable": true,
                "deletable": true,
                "form_model": {
                  "type": "horizontalInput",
                  "key": "name",
                  "pattern": "",
                  "required": true
                },
                "template": {
                  "display_name": "Horizontal Input",
                  "form_info": "Compact text input element",
                  "filters": [
                    "Template/template_builder",
                    "Template/template_builder/**"
                  ],
                  "expandable": false,
                  "key": "simple_input",
                  "categories": [
                    "Text"
                  ],
                  "schema": [
                    {
                      "key": "_short_name",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Label",
                        "placeholder": "The label displayed next to the input",
                        "required": true
                      }
                    },
                    {
                      "key": "_summary",
                      "type": "horizontalTextArea",
                      "templateOptions": {
                        "label": "Placeholder",
                        "placeholder": "The placeholder text displayed when the input is empty",
                        "required": true
                      }
                    },
                    {
                      "key": "key",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Key",
                        "pattern": "[a-zA-Z0-9_]+",
                        "placeholder": "The key for this input",
                        "required": true
                      }
                    },
                    {
                      "key": "required",
                      "type": "horizontalCheckbox",
                      "templateOptions": {
                        "label": "Is this element required?"
                      }
                    },
                    {
                      "key": "pattern",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Pattern",
                        "placeholder": "Optional validation regular expression",
                        "required": false
                      }
                    }
                  ],
                  "default_model": {
                    "type": "horizontalInput",
                    "key": "TODO_KEY"
                  },
                  "building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
                  },
                  "post_building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
                  }
                }
              },
              "children": []
            },
            {
              "root": false,
              "label": "Horizontal Input",
              "element": {
                "enabled": true,
                "short_name": "Value",
                "summary": "The key for the selected dropdown element",
                "row": 0,
                "col": 1,
                "sizeX": 1,
                "sizeY": 1,
                "expandable": false,
                "configurable": true,
                "deletable": true,
                "form_model": {
                  "type": "horizontalInput",
                  "key": "value",
                  "required": true,
                  "pattern": "[a-zA-Z0-9_]+"
                },
                "template": {
                  "display_name": "Horizontal Input",
                  "form_info": "Compact text input element",
                  "filters": [
                    "Template/template_builder",
                    "Template/template_builder/**"
                  ],
                  "expandable": false,
                  "key": "simple_input",
                  "categories": [
                    "Text"
                  ],
                  "schema": [
                    {
                      "key": "_short_name",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Label",
                        "placeholder": "The label displayed next to the input",
                        "required": true
                      }
                    },
                    {
                      "key": "_summary",
                      "type": "horizontalTextArea",
                      "templateOptions": {
                        "label": "Placeholder",
                        "placeholder": "The placeholder text displayed when the input is empty",
                        "required": true
                      }
                    },
                    {
                      "key": "key",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Key",
                        "pattern": "[a-zA-Z0-9_]+",
                        "placeholder": "The key for this input",
                        "required": true
                      }
                    },
                    {
                      "key": "required",
                      "type": "horizontalCheckbox",
                      "templateOptions": {
                        "label": "Is this element required?"
                      }
                    },
                    {
                      "key": "pattern",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Pattern",
                        "placeholder": "Optional validation regular expression",
                        "required": false
                      }
                    }
                  ],
                  "default_model": {
                    "type": "horizontalInput",
                    "key": "TODO_KEY"
                  },
                  "building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
                  },
                  "post_building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "root": false,
          "label": "Section header",
          "element": {
            "enabled": true,
            "short_name": "Dropdown Elements:",
            "summary": "",
            "row": 1,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {},
            "template": {
              "display_name": "Section header",
              "form_info": "Provides a section header",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Layout"
              ],
              "schema": [
                {
                  "templateOptions": {
                    "required": true,
                    "label": "Horizontal Input",
                    "placeholder": "The section header title (in HTML)"
                  },
                  "key": "_short_name",
                  "type": "horizontalInput"
                }
              ],
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  obj = { \n    \"className\": \"section-label\",\n    \"template\": \"<hr /><div><strong>\" + template.element.short_name + \"</strong></div>\"    \n        };\n  curr_obj.schema.push(obj);\n  \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Multi Text Input",
        "summary": "A variable list of text fields",
        "row": 5,
        "col": 1,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template/template_builder,Template/template_builder/**",
          "expandable": false,
          "key": "template_element",
          "categories": "Text"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "defaultValue": "Template/template_builder/**",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "short_name": "Input JSON",
            "summary": "",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Label\",\n\t\t\t\t\"placeholder\": \"The label displayed next to the input\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"key\": \"_summary\",\n\t\t\t\"type\": \"horizontalTextArea\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Placeholder\",\n\t\t\t\t\"placeholder\": \"The placeholder text displayed when the input is empty\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"key\": \"key\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Key\",\n              \t\"pattern\": \"[a-zA-Z0-9_]+\",\n\t\t\t\t\"placeholder\": \"The key for this input\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"key\": \"pattern\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Pattern\",\n\t\t\t\t\"placeholder\": \"Optional validation regular expression\",\n\t\t\t\t\"required\": false\n\t\t\t}\n\t\t}\n]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "[\n  {\n    \n  }\n]"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar obj = eval('(' + template.element.form_model.json + ')'); \n \tfor (i in obj) curr_obj.schema.push(obj[i]); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { type: 'multiInput', templateOptions: { inputOptions: { type: 'input', templateOptions: {} } } };\n  obj.key = template.element.form_model.key;\n  obj.templateOptions.label = template.element.short_name; \n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.inputOptions.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.inputOptions.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Default Values UI",
        "summary": "Select starting values for the various keys",
        "row": 2,
        "col": 3,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template/template_builder",
          "expandable": false,
          "key": "template_element",
          "categories": "Generic"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "defaultValue": "Template/template_builder/**",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Repeating Section",
          "element": {
            "enabled": true,
            "short_name": "Repeating Section",
            "summary": "",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": true,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "key": "default_values",
              "type": "repeatSection",
              "btnText": "Add"
            },
            "template": {
              "display_name": "Repeating Section",
              "form_info": "Create a sub-form under here",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": true,
              "key": "template_builder",
              "categories": [
                "Layout"
              ],
              "schema": [
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "placeholder": "Enter a key for this repeater",
                    "required": true
                  }
                },
                {
                  "key": "btnText",
                  "type": "horizontalInput",
                  "defaultValue": "Add",
                  "templateOptions": {
                    "label": "Add Button Name",
                    "placeholder": "Enter the name for this button",
                    "required": true
                  }
                }
              ],
              "default_model": {
                "key": "ADD_KEY_HERE",
                "type": "repeatSection",
                "btnText": "Add"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n  var m = template.element.form_model;\n  var obj = { templateOptions: { schema: [] } }; \n  curr_obj.schema.push(obj); \n  obj.type = m.type; \n  obj.key = m.key; \n  obj.templateOptions.btnText = m.btnText;\n  return obj.templateOptions;   \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar me = curr_obj.schema[curr_obj.schema.length-1]; \n  me.templateOptions.fields = me.templateOptions.schema;\n  me.templateOptions.schema = undefined;  \n}"
              }
            }
          },
          "children": [
            {
              "root": false,
              "label": "Horizontal Input",
              "element": {
                "enabled": true,
                "short_name": "Key",
                "summary": "The key to which to assign a default value",
                "row": 0,
                "col": 0,
                "sizeX": 1,
                "sizeY": 1,
                "expandable": false,
                "configurable": true,
                "deletable": true,
                "form_model": {
                  "type": "horizontalInput",
                  "key": "key",
                  "pattern": "[a-zA-Z0-9_-]+",
                  "required": true
                },
                "template": {
                  "display_name": "Horizontal Input",
                  "form_info": "Compact text input element",
                  "filters": [
                    "Template/template_builder",
                    "Template/template_builder/**"
                  ],
                  "expandable": false,
                  "key": "simple_input",
                  "categories": [
                    "Text"
                  ],
                  "schema": [
                    {
                      "key": "_short_name",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Label",
                        "placeholder": "The label displayed next to the input",
                        "required": true
                      }
                    },
                    {
                      "key": "_summary",
                      "type": "horizontalTextArea",
                      "templateOptions": {
                        "label": "Placeholder",
                        "placeholder": "The placeholder text displayed when the input is empty",
                        "required": true
                      }
                    },
                    {
                      "key": "key",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Key",
                        "pattern": "[a-zA-Z0-9_]+",
                        "placeholder": "The key for this input",
                        "required": true
                      }
                    },
                    {
                      "key": "required",
                      "type": "horizontalCheckbox",
                      "templateOptions": {
                        "label": "Is this element required?"
                      }
                    },
                    {
                      "key": "pattern",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Pattern",
                        "placeholder": "Optional validation regular expression",
                        "required": false
                      }
                    }
                  ],
                  "default_model": {
                    "type": "horizontalInput",
                    "key": "TODO_KEY"
                  },
                  "building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
                  },
                  "post_building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
                  }
                }
              },
              "children": []
            },
            {
              "root": false,
              "label": "Horizontal Input",
              "element": {
                "enabled": true,
                "short_name": "Value",
                "summary": "The default value for this key",
                "row": 0,
                "col": 1,
                "sizeX": 1,
                "sizeY": 1,
                "expandable": false,
                "configurable": true,
                "deletable": true,
                "form_model": {
                  "type": "horizontalInput",
                  "key": "value",
                  "pattern": "",
                  "required": true
                },
                "template": {
                  "display_name": "Horizontal Input",
                  "form_info": "Compact text input element",
                  "filters": [
                    "Template/template_builder",
                    "Template/template_builder/**"
                  ],
                  "expandable": false,
                  "key": "simple_input",
                  "categories": [
                    "Text"
                  ],
                  "schema": [
                    {
                      "key": "_short_name",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Label",
                        "placeholder": "The label displayed next to the input",
                        "required": true
                      }
                    },
                    {
                      "key": "_summary",
                      "type": "horizontalTextArea",
                      "templateOptions": {
                        "label": "Placeholder",
                        "placeholder": "The placeholder text displayed when the input is empty",
                        "required": true
                      }
                    },
                    {
                      "key": "key",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Key",
                        "pattern": "[a-zA-Z0-9_]+",
                        "placeholder": "The key for this input",
                        "required": true
                      }
                    },
                    {
                      "key": "required",
                      "type": "horizontalCheckbox",
                      "templateOptions": {
                        "label": "Is this element required?"
                      }
                    },
                    {
                      "key": "pattern",
                      "type": "horizontalInput",
                      "templateOptions": {
                        "label": "Pattern",
                        "placeholder": "Optional validation regular expression",
                        "required": false
                      }
                    }
                  ],
                  "default_model": {
                    "type": "horizontalInput",
                    "key": "TODO_KEY"
                  },
                  "building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
                  },
                  "post_building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
                  }
                }
              },
              "children": []
            }
          ]
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  curr_obj.default_model = {};\n  for (i in template.element.form_model.default_values) {\n    var el = template.element.form_model.default_values[i];\n    curr_obj.default_model[el.key] = el.value;\n  }\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "2-Line Input",
        "summary": "Text input element with label on the line above",
        "row": 4,
        "col": 4,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template/template_builder,Template/template_builder/**",
          "expandable": false,
          "key": "simple_input",
          "categories": "Text"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "defaultValue": "Template/template_builder/**",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "short_name": "Input JSON",
            "summary": "",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Label\",\n\t\t\t\t\"placeholder\": \"The label displayed next to the input\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"key\": \"_summary\",\n\t\t\t\"type\": \"horizontalTextArea\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Placeholder\",\n\t\t\t\t\"placeholder\": \"The placeholder text displayed when the input is empty\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"key\": \"key\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Key\",\n              \t\"pattern\": \"[a-zA-Z0-9_]+\",\n\t\t\t\t\"placeholder\": \"The key for this input\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t},\n  \t\t{\n          \t\"key\": \"required\",\n          \t\"type\": \"horizontalCheckbox\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Is this element required?\"\n            }\n        },\n\t\t{\n\t\t\t\"key\": \"pattern\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Pattern\",\n\t\t\t\t\"placeholder\": \"Optional validation regular expression\",\n\t\t\t\t\"required\": false\n\t\t\t}\n\t\t}\n]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "[\n  {\n    \n  }\n]"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar obj = eval('(' + template.element.form_model.json + ')'); \n \tfor (i in obj) curr_obj.schema.push(obj[i]); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Default Values",
          "element": {
            "enabled": true,
            "short_name": "Raw Default Values",
            "summary": "",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "{\n  \t\"type\": \"input\",\n\t\"key\": \"TODO_KEY\"\n}"
            },
            "template": {
              "display_name": "Raw Default Values",
              "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Model JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "{\n\n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 2,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Standalone Checkbox",
        "summary": "Non-compact checkbox input element",
        "row": 5,
        "col": 3,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template/template_builder,Template/template_builder/**",
          "expandable": false,
          "key": "simple_input",
          "categories": "Selection"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "defaultValue": "Template/template_builder/**",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "short_name": "Input JSON",
            "summary": "",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Label\",\n\t\t\t\t\"placeholder\": \"The label displayed next to the input\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"key\": \"key\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Key\",\n              \t\"pattern\": \"[a-zA-Z0-9_]+\",\n\t\t\t\t\"placeholder\": \"The key for this input\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t}\n]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "[\n  {\n    \n  }\n]"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar obj = eval('(' + template.element.form_model.json + ')'); \n \tfor (i in obj) curr_obj.schema.push(obj[i]); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Default Values",
          "element": {
            "enabled": true,
            "short_name": "Raw Default Values",
            "summary": "",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "{\n  \t\"type\": \"checkbox\",\n\t\"key\": \"TODO_KEY\"\n}"
            },
            "template": {
              "display_name": "Raw Default Values",
              "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Model JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "{\n\n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 2,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.type = template.element.form_model.type; \n  obj.key = template.element.form_model.key;\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Vertical Text Area",
        "summary": "Text area input element with label at the top",
        "row": 5,
        "col": 4,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "filters": "Template/template_builder,Template/template_builder/**",
          "expandable": false,
          "key": "simple_input",
          "categories": "Text"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "defaultValue": "Template/template_builder/**",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "short_name": "Input JSON",
            "summary": "",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Label\",\n\t\t\t\t\"placeholder\": \"The label displayed next to the input\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"key\": \"_summary\",\n\t\t\t\"type\": \"horizontalTextArea\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Placeholder\",\n\t\t\t\t\"placeholder\": \"The placeholder text displayed when the input is empty\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"key\": \"key\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Key\",\n              \t\"pattern\": \"[a-zA-Z0-9_]+\",\n\t\t\t\t\"placeholder\": \"The key for this input\",\n\t\t\t\t\"required\": true\n\t\t\t}\n\t\t},\n  \t\t{\n          \t\"key\": \"required\",\n          \t\"type\": \"horizontalCheckbox\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Is this element required?\"\n            }\n        }\n]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "[\n  {\n    \n  }\n]"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar obj = eval('(' + template.element.form_model.json + ')'); \n \tfor (i in obj) curr_obj.schema.push(obj[i]); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Default Values",
          "element": {
            "enabled": true,
            "short_name": "Raw Default Values",
            "summary": "",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "{\n  \t\"type\": \"textarea\",\n\t\"key\": \"TODO_KEY\"\n}"
            },
            "template": {
              "display_name": "Raw Default Values",
              "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Model JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "{\n\n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 2,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  if (template.element.form_model.rows) obj.templateOptions.rows = parseInt(template.element.form_model.rows);\n  obj.templateOptions.required = (true === template.element.form_model.required);\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Horizontal Input",
          "element": {
            "enabled": true,
            "short_name": "Number of rows",
            "summary": "Override the starting number of rows",
            "row": 0,
            "col": 3,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "type": "horizontalInput",
              "key": "rows",
              "pattern": "[0-9]+"
            },
            "template": {
              "display_name": "Horizontal Input",
              "form_info": "Compact text input element",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "simple_input",
              "categories": [
                "Text"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "_summary",
                  "type": "horizontalTextArea",
                  "templateOptions": {
                    "label": "Placeholder",
                    "placeholder": "The placeholder text displayed when the input is empty",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                },
                {
                  "key": "required",
                  "type": "horizontalCheckbox",
                  "templateOptions": {
                    "label": "Is this element required?"
                  }
                },
                {
                  "key": "pattern",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Pattern",
                    "placeholder": "Optional validation regular expression",
                    "required": false
                  }
                }
              ],
              "default_model": {
                "type": "horizontalInput",
                "key": "TODO_KEY"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    }
  ]
}