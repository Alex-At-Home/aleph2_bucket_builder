{
  "root": true,
  "label": "Template",
  "children": [
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "row": 1,
        "col": 0,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": false,
          "key": "data_bucket",
          "sub_keys": "",
          "categories": "Metadata",
          "filters": "Bucket",
          "child_filters": ""
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        },
        "short_name": "Bucket Metadata",
        "summary": "General bucket parameters"
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "Creating the element from JSON",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { \n  curr_obj.full_name = template.element.form_model.full_name;\n    \tvar pf = template.element.form_model.poll_frequency; \n  curr_obj.poll_frequency = (pf || '').length > 0 ? pf : undefined; \t\tif (template.element.form_model.requested_num_objects) { curr_obj.test_params = {};\n\t\tvar doc = curr_obj.test_params;\n\t\tdoc.requested_num_objects = parseInt(template.element.form_model.requested_num_objects);\n\t\tdoc.max_startup_time_secs = parseInt(template.element.form_model.max_startup_time_secs);\n\t\tdoc.max_run_time_secs = parseInt(template.element.form_model.max_run_time_secs);\n\t\tif ((template.element.form_model.max_storage_time_secs || '').length > 0) doc.max_storage_time_secs = parseInt(template.element.form_model.max_storage_time_secs);\n\t\tdoc.overwrite_existing_data = template.element.form_model.overwrite_existing_data; }\n\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"full_name\",\"type\":\"horizontalInput\",\"templateOptions\":{\"label\":\"Bucket Path\",\"placeholder\":\"The virtual bucket path, eg /path/to/bucket\",\"required\":true}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 1,
            "short_name": "Bucket Path",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"poll_frequency\",\"type\":\"horizontalInput\",\"templateOptions\":{\"label\":\"Poll Frequency\",\"placeholder\":\"Human readable frequency (eg '10min', '1 day') for how often this harvester is polled\",\"required\":false}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 2,
            "short_name": "Poll Frequency",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"template\":\"<hr/>\"}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 3,
            "short_name": "Raw HTML",
            "summary": "Type: Raw HTML"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"show_test_settings\",\"type\":\"checkbox\",\"templateOptions\":{\"label\":\"Show Test Settings\"}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 1,
            "col": 0,
            "short_name": "Show Test Settings",
            "summary": "Type: checkbox"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"requested_num_objects\",\"hideExpression\":\"!model.show_test_settings\",\"type\":\"horizontalInput\",\"defaultValue\":\"100\",\"templateOptions\":{\"pattern\":\"[0-9]+\",\"label\":\"Requested Data Objects\",\"placeholder\":\"The desired number of data objects to be returned by the test\",\"required\":true}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 1,
            "col": 1,
            "short_name": "Requested Data Objects",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"max_startup_time_secs\",\"hideExpression\":\"!model.show_test_settings\",\"type\":\"horizontalInput\",\"defaultValue\":\"60\",\"templateOptions\":{\"pattern\":\"[0-9]+\",\"label\":\"Max Startup Time (s)\",\"placeholder\":\"The maximum number of seconds to wait for the test to startup\",\"required\":true}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 1,
            "col": 2,
            "short_name": "Max Startup Time (s)",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"max_run_time_secs\",\"hideExpression\":\"!model.show_test_settings\",\"type\":\"horizontalInput\",\"defaultValue\":\"120\",\"templateOptions\":{\"pattern\":\"[0-9]+\",\"label\":\"Max Run Time (s)\",\"placeholder\":\"The maximum number of seconds to wait for the test to run, after it has started up\",\"required\":true}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 1,
            "col": 3,
            "short_name": "Max Run Time (s)",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"max_storage_time_secs\",\"hideExpression\":\"!model.show_test_settings\",\"type\":\"horizontalInput\",\"defaultValue\":\"86400\",\"templateOptions\":{\"pattern\":\"[0-9]+\",\"label\":\"Max Test Storage Time (s)\",\"placeholder\":\"The maximum time (secs) to keep the test result data\",\"required\":false}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 2,
            "col": 0,
            "short_name": "Max Test Storage Time (s)",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"overwrite_existing_data\",\"hideExpression\":\"!model.show_test_settings\",\"type\":\"horizontalCheckbox\",\"defaultValue\":true,\"templateOptions\":{\"label\":\"Overwrite existing data\",\"required\":false}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 2,
            "col": 1,
            "short_name": "Overwrite existing data",
            "summary": "Type: horizontalCheckbox"
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "row": 1,
        "col": 1,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": false,
          "key": "harvest_engine",
          "sub_keys": "",
          "categories": "Harvester",
          "filters": "Bucket",
          "child_filters": ""
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        },
        "short_name": "Generic Harvester",
        "summary": "For advanced users: create an empty Harvester Config that users can build with the form; and configure by writing raw JSON"
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "Creating the element from JSON",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { \n   curr_obj.harvest_technology_name_or_id = template.element.form_model.harvest_technology_name_or_id; \n  curr_obj.node_list_rules = a2_optional_array_from_csv(template.element.form_model.node_list_rules);\n\t  curr_obj.multi_node_enabled = template.element.form_model.multi_node_enabled;\n  curr_obj.lock_to_nodes = template.element.form_model.lock_to_nodes;\n  curr_obj.harvest_configs = [\n    {\n      module_name_or_id: template.element.form_model.module_name_or_id, \n      library_names_or_ids: template.element.form_model.library_names_or_ids,\n      entry_point: template.element.form_model.entry_point, \n      config: JSON.parse(template.element.form_model.config || '{}') \n    }]; \n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"harvest_technology_name_or_id\",\"type\":\"horizontalInput\",\"templateOptions\":{\"label\":\"Technology Library Name\",\"placeholder\":\"The path to the technology, eg /app/aleph2/library/harvester.jar\",\"required\":true}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 1,
            "short_name": "Technology Library Name",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"template\":\"<hr/>\"}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 2,
            "short_name": "Raw HTML",
            "summary": "Type: Raw HTML"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"show_advanced\",\"type\":\"checkbox\",\"templateOptions\":{\"label\":\"Show Advanced Options\"}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 3,
            "short_name": "Show Advanced Options",
            "summary": "Type: checkbox"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"module_name_or_id\",\"type\":\"horizontalInput\",\"hideExpression\":\"!model.show_advanced\",\"templateOptions\":{\"label\":\"Technology Module Name\",\"placeholder\":\"For harvesters with pluggable modules, the path to the module, eg /app/aleph2/library/harvester_module.jar\",\"required\":false}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 1,
            "col": 0,
            "short_name": "Technology Module Name",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"entry_point\",\"type\":\"horizontalInput\",\"hideExpression\":\"!model.show_advanced\",\"templateOptions\":{\"label\":\"Entry Point Override\",\"placeholder\":\"For harvest modules with multiple entry points, specifies the JVM class to execute, eg com.ikanow.aleph2.harvest.module.Module1EntryPoint\",\"required\":false}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 1,
            "col": 1,
            "short_name": "Entry Point Override",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"library_names_or_ids\",\"type\":\"multiInput\",\"hideExpression\":\"!model.show_advanced\",\"templateOptions\":{\"label\":\"Additional Library Modules\",\"inputOptions\":{\"type\":\"input\",\"templateOptions\":{\"label\":\"Technology Module Name\",\"placeholder\":\"For harvesters that need additional library modules, the path to the module, eg /app/aleph2/library/harvester_module.jar\",\"required\":false}}}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 1,
            "col": 2,
            "short_name": "Additional Library Modules",
            "summary": "Type: multiInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"node_list_rules\",\"type\":\"horizontalInput\",\"hideExpression\":\"!model.show_advanced\",\"templateOptions\":{\"label\":\"Node rules\",\"placeholder\":\"Comma-separated list of rules determining on which nodes this harvester will run\",\"required\":false}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 1,
            "col": 3,
            "short_name": "Node rules",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"multi_node_enabled\",\"type\":\"horizontalCheckbox\",\"defaultValue\":false,\"hideExpression\":\"!model.show_advanced\",\"templateOptions\":{\"label\":\"Harvester multi-node enabled\",\"required\":false}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 2,
            "col": 0,
            "short_name": "Harvester multi-node enabled",
            "summary": "Type: horizontalCheckbox"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"lock_to_nodes\",\"type\":\"horizontalCheckbox\",\"defaultValue\":true,\"hideExpression\":\"!model.show_advanced\",\"templateOptions\":{\"label\":\"Lock harvester to the same node/set of nodes (recommend leave as true)\",\"required\":false}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 2,
            "col": 1,
            "short_name": "Lock harvester to the same node/set of nodes (recommend leave as true)",
            "summary": "Type: horizontalCheckbox"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"template\":\"<hr/>\"}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 2,
            "col": 2,
            "short_name": "Raw HTML",
            "summary": "Type: Raw HTML"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"config\",\"type\":\"code_input\",\"defaultValue\":\"{\\n}\",\"templateOptions\":{\"label\":\"Harvest Configuration JSON\",\"codemirror\":{\"lineNumbers\":true,\"smartIndent\":true,\"mode\":\"javascript\"}}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 2,
            "col": 3,
            "short_name": "Harvest Configuration JSON",
            "summary": "Type: code_input"
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "row": 0,
        "col": 2,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": true,
          "key": "enrichment_engine",
          "sub_keys": "",
          "categories": "Enrichment",
          "filters": "Bucket",
          "child_filters": "batch_enrichment_meta,enrichment_meta,batch_technology_override"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        },
        "short_name": "Batch Enrichment Pipeline",
        "summary": "<p>This is a container for a batch enrichment pipeline that will transform incoming objects before writing them into the bucket output.</p>\n<p>It has no attributes of its own - instead expand it using the <a class=\"glyphicon glyphicon-fullscreen\"></a> icon\n and then add the desired attributes from those available.\n</p>\n"
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "Creating the element from JSON",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { \n  curr_obj.external_emit_paths = a2_optional_array_from_csv(template.element.form_model.external_emit_paths);\n  curr_obj.master_enrichment_type = 'batch'; \n  curr_obj.batch_enrichment_configs = []; \n  return curr_obj.batch_enrichment_configs; \n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"external_emit_paths\",\"type\":\"horizontalInput\",\"templateOptions\":{\"label\":\"Allowed external output paths\",\"placeholder\":\"Comma-separated list of paths/globs to which the bucket is allowed to 'externalEmit'\",\"required\":false}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 1,
            "short_name": "Allowed external output paths",
            "summary": "Type: horizontalInput"
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "row": 0,
        "col": 3,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": true,
          "key": "enrichment_engine",
          "sub_keys": "",
          "categories": "Enrichment",
          "filters": "Bucket",
          "child_filters": "stream_enrichment_meta,enrichment_meta"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        },
        "short_name": "Streaming Enrichment Topology",
        "summary": "<p>This is a container for a streaming enrichment engine that will transform incoming objects before writing them into the bucket output.</p>\n<p>It has no attributes of its own - instead expand it using the <a class=\"glyphicon glyphicon-fullscreen\"></a> icon\n and then add the desired attributes from those available.\n</p>\n"
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "Creating the element from JSON",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { curr_obj.external_emit_paths = a2_optional_array_from_csv(template.element.form_model.external_emit_paths);\n curr_obj.master_enrichment_type = 'streaming'; curr_obj.streaming_enrichment_topology = {}; return curr_obj.streaming_enrichment_topology; }",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"external_emit_paths\",\"type\":\"horizontalInput\",\"templateOptions\":{\"label\":\"Allowed external output paths\",\"placeholder\":\"Comma-separated list of paths/globs to which the bucket is allowed to 'externalEmit'\",\"required\":false}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 1,
            "short_name": "Allowed external output paths",
            "summary": "Type: horizontalInput"
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "row": 2,
        "col": 0,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": false,
          "key": "enrichment_meta",
          "sub_keys": "",
          "categories": "Generic",
          "filters": "Bucket/**",
          "child_filters": ""
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        },
        "short_name": "Raw JSON Enrichment Element",
        "summary": "For advanced users: create an empty document schema JSON object that can be Raw JSON to provide the desired functionality\n"
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "Creating the element from JSON",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = JSON.parse(template.element.form_model.element || '{}'); a2_inject_enrichment(curr_obj, obj); }",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"element\",\"type\":\"code_input\",\"defaultValue\":\"{\\n}\",\"templateOptions\":{\"label\":\"Enrichment Element JSON\",\"codemirror\":{\"lineNumbers\":true,\"smartIndent\":true,\"mode\":\"javascript\"}}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 1,
            "short_name": "Enrichment Element JSON",
            "summary": "Type: code_input"
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "row": 2,
        "col": 1,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": true,
          "key": "analytic_thread",
          "sub_keys": "",
          "categories": "Analytics",
          "filters": "Bucket",
          "child_filters": "analytic_job,analytic_trigger"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        },
        "short_name": "Analytic Thread Container",
        "summary": "<p>This is a container for the analytic jobs that fill the bucket with data</p>\n<p>It has no attributes of its own - instead expand it using the <a class=\"glyphicon glyphicon-fullscreen\"></a> icon\n and then add the desired attributes from those available.\n</p>\n"
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "Creating the element from JSON",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { \n  curr_obj.external_emit_paths = a2_optional_array_from_csv(template.element.form_model.external_emit_paths); \n  curr_obj.analytic_thread = { jobs: [] }; \n  return curr_obj.analytic_thread; \n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"external_emit_paths\",\"type\":\"horizontalInput\",\"templateOptions\":{\"label\":\"Allowed external output paths\",\"placeholder\":\"Comma-separated list of paths/globs to which the bucket is allowed to 'externalEmit'\",\"required\":false}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 1,
            "short_name": "Allowed external output paths",
            "summary": "Type: horizontalInput"
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "row": 1,
        "col": 2,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": true,
          "key": "analytic_job",
          "sub_keys": "",
          "categories": "Generic Processing",
          "filters": "Bucket/**",
          "child_filters": "analytic_input,analytic_output"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        },
        "short_name": "Generic Analytic Job",
        "summary": "A streaming or batch analytic job that performs processing on input or stored data. "
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "Creating the element from JSON",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { \n  var new_obj = { inputs: [] };\n  new_obj.name = template.element.short_name; new_obj.lock_to_nodes = template.element.form_model.lock_to_nodes; new_obj.analytic_type = template.element.form_model.analytic_type; \n  new_obj.dependencies = a2_optional_array_from_csv(template.element.form_model.dependencies);\n  new_obj.analytic_technology_name_or_id = template.element.form_model.analytic_technology_name_or_id; \n  new_obj.module_name_or_id = template.element.form_model.module_name_or_id; \n  new_obj.entry_point = template.element.form_model.entry_point; \n  new_obj.library_names_or_ids = template.element.form_model.library_names_or_ids; \n  new_obj.node_list_rules = a2_optional_array_from_csv(template.element.form_model.node_list_rules);\n  new_obj.config = JSON.parse(template.element.form_model.config || '{}'); \n  curr_obj.jobs.push(new_obj);\n  return new_obj;\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"_short_name\",\"type\":\"horizontalInput\",\"templateOptions\":{\"label\":\"Unique Job Name\",\"pattern\":\"[a-zA-Z0-9_]+\",\"placeholder\":\"A Short Name For This Element (Alphanumeric/_ only, no spaces - used for dependencies etc)\",\"required\":true}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 1,
            "short_name": "Unique Job Name",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"analytic_type\",\"type\":\"horizontalSelect\",\"templateOptions\":{\"required\":true,\"label\":\"Analytic Type\",\"options\":[{\"name\":\"Batch\",\"value\":\"batch\"},{\"name\":\"Streaming\",\"value\":\"streaming\"}]}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 2,
            "short_name": "Analytic Type",
            "summary": "Type: horizontalSelect"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"dependencies\",\"type\":\"horizontalInput\",\"hideExpression\":\"model.analytic_type !== \\\"batch\\\"\",\"templateOptions\":{\"label\":\"Dependencies\",\"placeholder\":\"A comma-separated list of dependencies on other analytic jobs\",\"required\":false}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 3,
            "short_name": "Dependencies",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"template\":\"<hr/>\"}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 1,
            "col": 0,
            "short_name": "Raw HTML",
            "summary": "Type: Raw HTML"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"analytic_technology_name_or_id\",\"type\":\"horizontalInput\",\"templateOptions\":{\"label\":\"Technology Library Name\",\"placeholder\":\"The path to the technology, eg /app/aleph2/library/analytic_technology.jar\",\"required\":true}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 1,
            "col": 1,
            "short_name": "Technology Library Name",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"template\":\"<hr/>\"}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 1,
            "col": 2,
            "short_name": "Raw HTML",
            "summary": "Type: Raw HTML"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"show_advanced\",\"type\":\"checkbox\",\"templateOptions\":{\"label\":\"Show Advanced Options\"}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 1,
            "col": 3,
            "short_name": "Show Advanced Options",
            "summary": "Type: checkbox"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"module_name_or_id\",\"type\":\"horizontalInput\",\"hideExpression\":\"!model.show_advanced\",\"templateOptions\":{\"label\":\"Technology Module Name\",\"placeholder\":\"For analytic technologies with pluggable modules, the path to the module, eg /app/aleph2/library/harvester_module.jar\",\"required\":false}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 2,
            "col": 0,
            "short_name": "Technology Module Name",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"entry_point\",\"type\":\"horizontalInput\",\"hideExpression\":\"!model.show_advanced\",\"templateOptions\":{\"label\":\"Entry Point Override\",\"placeholder\":\"For analytics modules with multiple entry points, specifies the JVM class to execute, eg com.ikanow.aleph2.harvest.module.Module1EntryPoint\",\"required\":false}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 2,
            "col": 1,
            "short_name": "Entry Point Override",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"library_names_or_ids\",\"type\":\"multiInput\",\"hideExpression\":\"!model.show_advanced\",\"templateOptions\":{\"label\":\"Additional Library Modules\",\"inputOptions\":{\"type\":\"input\",\"templateOptions\":{\"label\":\"Technology Module Name\",\"placeholder\":\"For analytics that need additional library modules, the path to the module, eg /app/aleph2/library/analytic_module_lib.jar\",\"required\":false}}}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 2,
            "col": 2,
            "short_name": "Additional Library Modules",
            "summary": "Type: multiInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"node_list_rules\",\"type\":\"horizontalInput\",\"hideExpression\":\"!model.show_advanced\",\"templateOptions\":{\"label\":\"Node rules\",\"placeholder\":\"Comma-separated list of rules determining on which nodes this analytic job will run\",\"required\":false}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 2,
            "col": 3,
            "short_name": "Node rules",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"lock_to_nodes\",\"type\":\"horizontalCheckbox\",\"defaultValue\":false,\"hideExpression\":\"!model.show_advanced\",\"templateOptions\":{\"label\":\"Lock analytic job to the same node/set of nodes (recommend leave as false)\",\"required\":false}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 3,
            "col": 0,
            "short_name": "Lock analytic job to the same node/set of nodes (recommend leave as false)",
            "summary": "Type: horizontalCheckbox"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"template\":\"<hr/>\"}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 3,
            "col": 1,
            "short_name": "Raw HTML",
            "summary": "Type: Raw HTML"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"config\",\"type\":\"code_input\",\"defaultValue\":\"{\\n}\",\"templateOptions\":{\"label\":\"Analytic Job Configuration JSON\",\"codemirror\":{\"lineNumbers\":true,\"smartIndent\":true,\"mode\":\"javascript\"}}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 3,
            "col": 2,
            "short_name": "Analytic Job Configuration JSON",
            "summary": "Type: code_input"
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "row": 1,
        "col": 3,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": true,
          "key": "analytic_job",
          "sub_keys": "",
          "categories": "Generic Processing",
          "filters": "Bucket/**",
          "child_filters": "analytic_input,analytic_output,enrichment_meta,batch_enrichment_meta,batch_technology_override"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        },
        "short_name": "Batch Analytic Pipeline",
        "summary": "A batch analytic job that uses the batch enrichment engine to perform processing on input or stored data. "
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "Creating the element from JSON",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { \n  var new_obj = { inputs: [] };\n  new_obj.name = template.element.short_name; new_obj.analytic_type = 'batch'; \n  new_obj.dependencies = a2_optional_array_from_csv(template.element.form_model.dependencies);\n  new_obj.analytic_technology_name_or_id = 'BatchEnrichmentService'; \n  new_obj.module_name_or_id = template.element.form_model.module_name_or_id; \n  new_obj.library_names_or_ids = template.element.form_model.library_names_or_ids; \n  new_obj.node_list_rules = a2_optional_array_from_csv(template.element.form_model.node_list_rules);\n  new_obj.config = { 'enrich_pipeline': [] }; \n  curr_obj.jobs.push(new_obj);\n  return new_obj;\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var lib_map = {}; var curr_job = curr_obj.jobs[curr_obj.jobs.length-1]; \n  for ( var e in curr_job.config.enrich_pipeline ) { \n    for ( l in curr_job.config.enrich_pipeline[e].library_names_or_ids ) { \n      lib_map[curr_job.config.enrich_pipeline[e].library_names_or_ids[l]] = true;\n    }\n  } \n  curr_job.library_names_or_ids = []; var libs = (template.element.form_model.library_names_or_ids || []); \n  for (var kk in libs) curr_job.library_names_or_ids.push(libs[kk]); \n  for (var k in lib_map) curr_job.library_names_or_ids.push(k); \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"_short_name\",\"type\":\"horizontalInput\",\"templateOptions\":{\"label\":\"Unique Job Name\",\"pattern\":\"[a-zA-Z0-9_]+\",\"placeholder\":\"A Short Name For This Element (Alphanumeric/_ only, no spaces - used for dependencies etc)\",\"required\":true}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 1,
            "short_name": "Unique Job Name",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"dependencies\",\"type\":\"horizontalInput\",\"templateOptions\":{\"label\":\"Dependencies\",\"placeholder\":\"A comma-separated list of dependencies on other analytic jobs\",\"required\":false}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 2,
            "short_name": "Dependencies",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"template\":\"<hr/>\"}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 3,
            "short_name": "Raw HTML",
            "summary": "Type: Raw HTML"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"module_name_or_id\",\"type\":\"horizontalInput\",\"templateOptions\":{\"label\":\"Technology Module Name\",\"placeholder\":\"For enrichment engines with pluggable modules, the path to the module, eg /app/aleph2/library/batch_enrichment_module.jar\",\"required\":false}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 1,
            "col": 0,
            "short_name": "Technology Module Name",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"template\":\"<hr/>\"}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 1,
            "col": 1,
            "short_name": "Raw HTML",
            "summary": "Type: Raw HTML"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"show_advanced\",\"type\":\"checkbox\",\"templateOptions\":{\"label\":\"Show Advanced Options\"}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 1,
            "col": 2,
            "short_name": "Show Advanced Options",
            "summary": "Type: checkbox"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"library_names_or_ids\",\"type\":\"multiInput\",\"hideExpression\":\"!model.show_advanced\",\"templateOptions\":{\"label\":\"Additional Library Modules\",\"inputOptions\":{\"type\":\"input\",\"templateOptions\":{\"label\":\"Technology Module Name\",\"placeholder\":\"For enrichment engines that need additional library modules, the path to the module, eg /app/aleph2/library/enrichment_module_lib.jar\",\"required\":false}}}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 1,
            "col": 3,
            "short_name": "Additional Library Modules",
            "summary": "Type: multiInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"node_list_rules\",\"type\":\"horizontalInput\",\"hideExpression\":\"!model.show_advanced\",\"templateOptions\":{\"label\":\"Node rules\",\"placeholder\":\"Comma-separated list of rules determining on which nodes this analytic job will run\",\"required\":false}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 2,
            "col": 0,
            "short_name": "Node rules",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"template\":\"<hr/>\"}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 2,
            "col": 1,
            "short_name": "Raw HTML",
            "summary": "Type: Raw HTML"
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "row": 3,
        "col": 0,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": true,
          "key": "analytic_job",
          "sub_keys": "",
          "categories": "Generic Processing",
          "filters": "Bucket/analytic_thread",
          "child_filters": "analytic_input,analytic_output,enrichment_meta,stream_enrichment_meta"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        },
        "short_name": "Streaming Analytic Topology",
        "summary": "A streaming analytic job that uses the streaming enrichment engine to perform processing on input or stored data. "
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "Creating the element from JSON",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { \n  var new_obj = { inputs: [] };\n  new_obj.name = template.element.short_name; new_obj.analytic_type = 'streaming'; \n  \tnew_obj.analytic_technology_name_or_id = 'StreamingEnrichmentService'; \n  new_obj.module_name_or_id = template.element.form_model.module_name_or_id; \n  new_obj.library_names_or_ids = template.element.form_model.library_names_or_ids; \n  new_obj.node_list_rules = a2_optional_array_from_csv(template.element.form_model.node_list_rules);\n  new_obj.config = { }; \n  curr_obj.jobs.push(new_obj);\n  return new_obj;\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"_short_name\",\"type\":\"horizontalInput\",\"templateOptions\":{\"label\":\"Unique Job Name\",\"pattern\":\"[a-zA-Z0-9_]+\",\"placeholder\":\"A Short Name For This Element (Alphanumeric/_ only, no spaces - used for dependencies etc)\",\"required\":true}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 1,
            "short_name": "Unique Job Name",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"module_name_or_id\",\"type\":\"horizontalInput\",\"templateOptions\":{\"label\":\"Technology Module Name\",\"placeholder\":\"For enrichment engines with pluggable modules, the path to the module, eg /app/aleph2/library/streaming_enrichment_module.jar\",\"required\":false}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 2,
            "short_name": "Technology Module Name",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"template\":\"<hr/>\"}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 3,
            "short_name": "Raw HTML",
            "summary": "Type: Raw HTML"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"show_advanced\",\"type\":\"checkbox\",\"templateOptions\":{\"label\":\"Show Advanced Options\"}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 1,
            "col": 0,
            "short_name": "Show Advanced Options",
            "summary": "Type: checkbox"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"library_names_or_ids\",\"hideExpression\":\"!model.show_advanced\",\"type\":\"multiInput\",\"templateOptions\":{\"label\":\"Additional Library Modules\",\"inputOptions\":{\"type\":\"input\",\"templateOptions\":{\"label\":\"Technology Module Name\",\"placeholder\":\"For analytics that need additional library modules, the path to the module, eg /app/aleph2/library/analytic_module_lib.jar\",\"required\":false}}}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 1,
            "col": 1,
            "short_name": "Additional Library Modules",
            "summary": "Type: multiInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"node_list_rules\",\"type\":\"horizontalInput\",\"hideExpression\":\"!model.show_advanced\",\"templateOptions\":{\"label\":\"Node rules\",\"placeholder\":\"Comma-separated list of rules determining on which nodes this analytic job will run\",\"required\":false}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 1,
            "col": 2,
            "short_name": "Node rules",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"template\":\"<hr/>\"}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 1,
            "col": 3,
            "short_name": "Raw HTML",
            "summary": "Type: Raw HTML"
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "row": 3,
        "col": 1,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": false,
          "key": "analytic_trigger",
          "sub_keys": "",
          "categories": "Scheduling",
          "filters": "Bucket/analytic_thread",
          "child_filters": ""
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        },
        "short_name": "Raw JSON Analytic Trigger",
        "summary": "For advanced users: create an empty trigger JSON object that can be Raw JSON to provide the desired functionality\n"
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "Creating the element from JSON",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { curr_obj.trigger_config = JSON.parse(template.element.form_model.trigger || '{}'); var pf = template.element.form_model.schedule; curr_obj.trigger_config.schedule = (pf || '').length > 0 ? pf : undefined; }",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"schedule\",\"type\":\"horizontalInput\",\"templateOptions\":{\"label\":\"Trigger Check Schedule\",\"placeholder\":\"Human readable frequency (eg '10min', '1 day') for how often this harvester is polled\",\"required\":false}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 1,
            "short_name": "Trigger Check Schedule",
            "summary": "Type: horizontalInput"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"template\":\"<hr/>\"}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 2,
            "short_name": "Raw HTML",
            "summary": "Type: Raw HTML"
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"trigger\",\"type\":\"code_input\",\"defaultValue\":\"{\\n}\",\"templateOptions\":{\"label\":\"Analytic Thread Trigger JSON\",\"codemirror\":{\"lineNumbers\":true,\"smartIndent\":true,\"mode\":\"javascript\"}}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 3,
            "short_name": "Analytic Thread Trigger JSON",
            "summary": "Type: code_input"
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "row": 2,
        "col": 2,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": false,
          "key": "analytic_input",
          "sub_keys": "",
          "categories": "Input",
          "filters": "Bucket/**",
          "child_filters": ""
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        },
        "short_name": "Raw JSON Global Input Config",
        "summary": "Empty JSON object used to configure the global default input configuration for all inputs in this analytic job\n"
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "Creating the element from JSON",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { curr_obj.global_input_config = JSON.parse(template.element.form_model.global_input_config || '{}'); }",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"global_input_config\",\"type\":\"code_input\",\"defaultValue\":\"{\\n}\",\"templateOptions\":{\"label\":\"Analytic Global Input Configuration JSON\",\"codemirror\":{\"lineNumbers\":true,\"smartIndent\":true,\"mode\":\"javascript\"}}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 1,
            "short_name": "Analytic Global Input Configuration JSON",
            "summary": "Type: code_input"
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "row": 2,
        "col": 3,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": false,
          "key": "analytic_input",
          "sub_keys": "",
          "categories": "Input",
          "filters": "Bucket/**",
          "child_filters": ""
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        },
        "short_name": "Raw JSON Analytic Input",
        "summary": "Empty JSON object used to configure an input for this analytic job\n"
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "Creating the element from JSON",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { curr_obj.inputs.push(JSON.parse(template.element.form_model.input || '{}')); }",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"input\",\"type\":\"code_input\",\"defaultValue\":\"{\\n}\",\"templateOptions\":{\"label\":\"Analytic Input JSON\",\"codemirror\":{\"lineNumbers\":true,\"smartIndent\":true,\"mode\":\"javascript\"}}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 1,
            "short_name": "Analytic Input JSON",
            "summary": "Type: code_input"
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "row": 4,
        "col": 0,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": false,
          "key": "analytic_output",
          "sub_keys": "",
          "categories": "Output",
          "filters": "Bucket/**",
          "child_filters": ""
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        },
        "short_name": "Raw JSON Analytic Output",
        "summary": "Empty JSON object used to configure a single output for this analytic job\n"
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "Creating the element from JSON",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { curr_obj.output = JSON.parse(template.element.form_model.output || '{}'); }",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"output\",\"type\":\"code_input\",\"defaultValue\":\"{\\n}\",\"templateOptions\":{\"label\":\"Analytic Output JSON\",\"codemirror\":{\"lineNumbers\":true,\"smartIndent\":true,\"mode\":\"javascript\"}}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 1,
            "short_name": "Analytic Output JSON",
            "summary": "Type: code_input"
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "row": 4,
        "col": 1,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": true,
          "key": "data_schema",
          "sub_keys": "",
          "categories": "Metadata",
          "filters": "Bucket",
          "child_filters": "data_service_schema"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        },
        "short_name": "Data Schema Container",
        "summary": "<p>This is a container for the data schema for the different attributes of the stored data</p>\n<p>It has no attributes of its own - instead expand it using the <a class=\"glyphicon glyphicon-fullscreen\"></a> icon\n and then add the desired attributes from those available.\n</p>\n"
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "Creating the element from JSON",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { curr_obj.data_schema = {}; return curr_obj.data_schema; }",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "row": 3,
        "col": 2,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": false,
          "key": "data_service_schema",
          "sub_keys": "",
          "categories": "Schema",
          "filters": "Bucket/**",
          "child_filters": ""
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        },
        "short_name": "Raw JSON Search Index Schema",
        "summary": "For advanced users: create an empty search index schema JSON object that can be Raw JSON to provide the desired functionality\n"
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "Creating the element from JSON",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { curr_obj.search_index_schema = JSON.parse(template.element.form_model.schema || '{}'); }",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"schema\",\"type\":\"code_input\",\"defaultValue\":\"{\\n}\",\"templateOptions\":{\"label\":\"Search Index Schema JSON\",\"codemirror\":{\"lineNumbers\":true,\"smartIndent\":true,\"mode\":\"javascript\"}}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 1,
            "short_name": "Search Index Schema JSON",
            "summary": "Type: code_input"
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "row": 3,
        "col": 3,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": false,
          "key": "data_service_schema",
          "sub_keys": "",
          "categories": "Schema",
          "filters": "Bucket/**",
          "child_filters": ""
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        },
        "short_name": "Raw JSON Temporal Schema",
        "summary": "For advanced users: create an empty temporal schema JSON object that can be Raw JSON to provide the desired functionality\n"
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "Creating the element from JSON",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { curr_obj.temporal_schema = JSON.parse(template.element.form_model.schema || '{}'); }",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"schema\",\"type\":\"code_input\",\"defaultValue\":\"{\\n}\",\"templateOptions\":{\"label\":\"Temporal Schema JSON\",\"codemirror\":{\"lineNumbers\":true,\"smartIndent\":true,\"mode\":\"javascript\"}}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 1,
            "short_name": "Temporal Schema JSON",
            "summary": "Type: code_input"
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "row": 5,
        "col": 0,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": false,
          "key": "data_service_schema",
          "sub_keys": "",
          "categories": "Schema",
          "filters": "Bucket/**",
          "child_filters": ""
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        },
        "short_name": "Raw JSON Columnar Schema",
        "summary": "For advanced users: create an empty columnar schema JSON object that can be Raw JSON to provide the desired functionality\n"
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "Creating the element from JSON",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { curr_obj.columnar_schema = JSON.parse(template.element.form_model.schema || '{}'); }",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"schema\",\"type\":\"code_input\",\"defaultValue\":\"{\\n}\",\"templateOptions\":{\"label\":\"Columnar Schema JSON\",\"codemirror\":{\"lineNumbers\":true,\"smartIndent\":true,\"mode\":\"javascript\"}}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 1,
            "short_name": "Columnar Schema JSON",
            "summary": "Type: code_input"
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "row": 5,
        "col": 1,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": false,
          "key": "data_service_schema",
          "sub_keys": "",
          "categories": "Schema",
          "filters": "Bucket/**",
          "child_filters": ""
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        },
        "short_name": "Raw JSON Storage Schema",
        "summary": "For advanced users: create an empty storage schema JSON object that can be Raw JSON to provide the desired functionality\n"
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "Creating the element from JSON",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { curr_obj.storage_schema = JSON.parse(template.element.form_model.schema || '{}'); return curr_obj.storage_schema; }",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"schema\",\"type\":\"code_input\",\"defaultValue\":\"{\\n}\",\"templateOptions\":{\"label\":\"Storage Schema JSON\",\"codemirror\":{\"lineNumbers\":true,\"smartIndent\":true,\"mode\":\"javascript\"}}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 1,
            "short_name": "Storage Schema JSON",
            "summary": "Type: code_input"
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "row": 4,
        "col": 2,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": true,
          "key": "data_service_schema",
          "sub_keys": "",
          "categories": "Schema",
          "filters": "Bucket/**",
          "child_filters": "enrichment_meta"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        },
        "short_name": "Raw JSON Document Schema",
        "summary": "For advanced users: create an empty document schema JSON object that can be Raw JSON to provide the desired functionality\n"
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "Creating the element from JSON",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { curr_obj.document_schema = JSON.parse(template.element.form_model.schema || '{}'); curr_obj.document_schema.custom_deduplication_configs = []; return curr_obj.document_schema.custom_deduplication_configs; }",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"schema\",\"type\":\"code_input\",\"defaultValue\":\"{\\n}\",\"templateOptions\":{\"label\":\"Document Schema JSON\",\"codemirror\":{\"lineNumbers\":true,\"smartIndent\":true,\"mode\":\"javascript\"}}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 1,
            "short_name": "Document Schema JSON",
            "summary": "Type: code_input"
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Document Schema",
        "summary": "Configures the document service (supporting deduplication)",
        "row": 6,
        "col": 0,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": true,
          "key": "data_service_schema",
          "sub_keys": "document_schema",
          "categories": "Schema",
          "filters": "Bucket/**",
          "child_filters": "batch_enrichment_meta,enrichment_meta"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Horizontal Dropdown",
          "element": {
            "enabled": true,
            "short_name": "Deduplication Policy",
            "summary": "",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "type": "horizontalSelect",
              "key": "deduplication_policy",
              "options": [
                {
                  "name": "Leave existing objects",
                  "value": "leave"
                },
                {
                  "name": "Overwrite with newer objects, else leave",
                  "value": "update"
                },
                {
                  "name": "Overwrite existing objects",
                  "value": "overwrite"
                },
                {
                  "name": "Merge incoming and existing objects",
                  "value": "custom"
                },
                {
                  "name": "Merge newer incoming and existing objects",
                  "value": "custom_update"
                }
              ],
              "required": true
            },
            "template": {
              "display_name": "Horizontal Dropdown",
              "form_info": "Compact dropdown element",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "simple_input",
              "categories": [
                "Selection"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                },
                {
                  "key": "required",
                  "type": "horizontalCheckbox",
                  "templateOptions": {
                    "label": "Is this element required?"
                  }
                },
                {
                  "className": "section-label",
                  "template": "<hr /><div><strong>Dropdown Elements:</strong></div>"
                },
                {
                  "templateOptions": {
                    "btnText": "Add",
                    "fields": [
                      {
                        "templateOptions": {
                          "required": true,
                          "label": "Name",
                          "placeholder": "The display name associated with the dropdown value"
                        },
                        "key": "name",
                        "type": "horizontalInput"
                      },
                      {
                        "templateOptions": {
                          "required": true,
                          "pattern": "[a-zA-Z0-9_]+",
                          "label": "Value",
                          "placeholder": "The key for the selected dropdown element"
                        },
                        "key": "value",
                        "type": "horizontalInput"
                      }
                    ]
                  },
                  "type": "repeatSection",
                  "key": "options"
                }
              ],
              "default_model": {
                "type": "horizontalSelect",
                "key": "TODO_KEY"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.type = template.element.form_model.type; \n  obj.key = template.element.form_model.key;\n  obj.templateOptions.required = (true === template.element.form_model.required);\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.options = template.element.form_model.options;\n  curr_obj.schema.push(obj)\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Multi Text Input",
          "element": {
            "enabled": true,
            "short_name": "Deduplication Fields",
            "summary": "The list of fields over which to deduplicate",
            "row": 0,
            "col": 2,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "key": "deduplication_fields"
            },
            "template": {
              "display_name": "Multi Text Input",
              "form_info": "A variable list of text fields",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Text"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "_summary",
                  "type": "horizontalTextArea",
                  "templateOptions": {
                    "label": "Placeholder",
                    "placeholder": "The placeholder text displayed when the input is empty",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                },
                {
                  "key": "pattern",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Pattern",
                    "placeholder": "Optional validation regular expression",
                    "required": false
                  }
                }
              ],
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { type: 'multiInput', templateOptions: { inputOptions: { type: 'input', templateOptions: {} } } };\n  obj.key = template.element.form_model.key;\n  obj.templateOptions.label = template.element.short_name; \n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.inputOptions.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.inputOptions.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Multi Text Input",
          "element": {
            "enabled": true,
            "short_name": "Deduplication Contexts",
            "summary": "A list of bucket paths/globs to which to apply the deduplication",
            "row": 0,
            "col": 3,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "key": "deduplication_contexts"
            },
            "template": {
              "display_name": "Multi Text Input",
              "form_info": "A variable list of text fields",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Text"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "_summary",
                  "type": "horizontalTextArea",
                  "templateOptions": {
                    "label": "Placeholder",
                    "placeholder": "The placeholder text displayed when the input is empty",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                },
                {
                  "key": "pattern",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Pattern",
                    "placeholder": "Optional validation regular expression",
                    "required": false
                  }
                }
              ],
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { type: 'multiInput', templateOptions: { inputOptions: { type: 'input', templateOptions: {} } } };\n  obj.key = template.element.form_model.key;\n  obj.templateOptions.label = template.element.short_name; \n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.inputOptions.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.inputOptions.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Standalone Checkbox",
          "element": {
            "enabled": true,
            "short_name": "Finalize all object sets with custom enrichment step, singletons and duplicates",
            "summary": "If true (default: false) then all objects are run through the custom dedup (ie acting as a \"finalize\" step before emitting when there is no matching dedup)",
            "row": 0,
            "col": 4,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "type": "checkbox",
              "key": "custom_finalize_all_objects"
            },
            "template": {
              "display_name": "Standalone Checkbox",
              "form_info": "Non-compact checkbox input element",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "simple_input",
              "categories": [
                "Selection"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                }
              ],
              "default_model": {
                "type": "checkbox",
                "key": "TODO_KEY"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.type = template.element.form_model.type; \n  obj.key = template.element.form_model.key;\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Code Editor",
          "element": {
            "enabled": true,
            "short_name": "Technology Override Schema",
            "summary": "Allows document service technology specific settings",
            "row": 1,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "type": "code_input",
              "templateOptions": {
                "codemirror": {
                  "lineNumbers": true,
                  "smartIndent": true,
                  "mode": "javascript"
                },
                "label": "Technology Override Schema"
              },
              "key": "technology_override_schema",
              "mode": "javascript"
            },
            "template": {
              "display_name": "Code Editor",
              "form_info": "Write code in various languages (or JSON/XML/HTML)",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "simple_input",
              "categories": [
                "Text"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                },
                {
                  "key": "required",
                  "type": "horizontalCheckbox",
                  "templateOptions": {
                    "label": "Is this element required?"
                  }
                },
                {
                  "templateOptions": {
                    "required": true,
                    "label": "Language",
                    "options": [
                      {
                        "value": "clike",
                        "name": "Scala"
                      },
                      {
                        "value": "javascript",
                        "name": "Javascript/JSON"
                      },
                      {
                        "value": "r",
                        "name": "R"
                      },
                      {
                        "value": "python",
                        "name": "Python"
                      },
                      {
                        "value": "xml",
                        "name": "XML"
                      },
                      {
                        "value": "lua",
                        "name": "Lua"
                      },
                      {
                        "value": "yaml",
                        "name": "YAML"
                      },
                      {
                        "value": "properties",
                        "name": "Properties"
                      },
                      {
                        "value": "htmlembedded",
                        "name": "HTML (embedded)"
                      },
                      {
                        "value": "htmlmixed",
                        "name": "HTML (mixed)"
                      }
                    ]
                  },
                  "type": "horizontalSelect",
                  "key": "mode"
                }
              ],
              "default_model": {
                "type": "code_input",
                "templateOptions": {
                  "codemirror": {
                    "lineNumbers": true,
                    "smartIndent": true
                  }
                }
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { \n    key: template.element.form_model.key,\n    type: template.element.form_model.type,\n    templateOptions: template.element.form_model.templateOptions \n  };\n  obj.templateOptions.codemirror.mode = template.element.form_model.mode;\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.required = template.element.form_model.required;\n  curr_obj.schema.push(obj);\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Default Values",
          "element": {
            "enabled": true,
            "short_name": "Raw Default Values",
            "summary": "",
            "row": 2,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "{\n\t\"deduplication_timing\": \"custom\",\n    \"deduplication_policy\": \"leave\",\n    \"custom_policy\": \"strict\",\n     \"deduplication_fields\": [],\n     \"deduplication_contexts\": [],\n     \"custom_deduplication_configs\": [],\n       \"custom_finalize_all_objects\": false,\n         \"technology_override_schema\": \"{\\n\\t\\n}\"\n}"
            },
            "template": {
              "display_name": "Raw Default Values",
              "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Model JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "{\n\n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 2,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  curr_obj.document_schema = {};\n  curr_obj.document_schema.enabled = true;\n  curr_obj.document_schema.deduplication_timing = template.element.form_model.deduplication_timing;\n  curr_obj.document_schema.deduplication_policy = template.element.form_model.deduplication_policy;\n  curr_obj.document_schema.custom_policy = template.element.form_model.custom_policy;\n  curr_obj.document_schema.deduplication_fields = template.element.form_model.deduplication_fields;\n  curr_obj.document_schema.deduplication_contexts = template.element.form_model.deduplication_contexts;\n  curr_obj.document_schema.custom_deduplication_configs = [];\n  curr_obj.document_schema.custom_finalize_all_objects = template.element.form_model.custom_finalize_all_objects;\n  curr_obj.document_schema.delete_unhandled_duplicates = template.element.form_model.delete_unhandled_duplicates;\n  curr_obj.document_schema.technology_override_schema = JSON.parse(template.element.form_model.technology_override_schema);\n  return curr_obj.document_schema.custom_deduplication_configs;\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Standalone Checkbox",
          "element": {
            "enabled": true,
            "short_name": "Delete unhandled duplicates?",
            "summary": "If true (default: false unless \"custom policy\" is \"very strict\") then all existing duplicates that are not explicitly re-emitted are deleted. In non-custom mode, this ensures that only one object per set of deduplication fields is retained.",
            "row": 0,
            "col": 5,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "type": "checkbox",
              "key": "delete_unhandled_duplicates"
            },
            "template": {
              "display_name": "Standalone Checkbox",
              "form_info": "Non-compact checkbox input element",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "simple_input",
              "categories": [
                "Selection"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                }
              ],
              "default_model": {
                "type": "checkbox",
                "key": "TODO_KEY"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.type = template.element.form_model.type; \n  obj.key = template.element.form_model.key;\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Horizontal Dropdown",
          "element": {
            "enabled": true,
            "short_name": "Custom Policy",
            "summary": "",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "type": "horizontalSelect",
              "key": "custom_policy",
              "options": [
                {
                  "name": "Lax",
                  "value": "lax"
                },
                {
                  "name": "Strict",
                  "value": "strict"
                },
                {
                  "name": "Very Strict",
                  "value": "very_strict"
                }
              ],
              "required": true
            },
            "template": {
              "display_name": "Horizontal Dropdown",
              "form_info": "Compact dropdown element",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "simple_input",
              "categories": [
                "Selection"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                },
                {
                  "key": "required",
                  "type": "horizontalCheckbox",
                  "templateOptions": {
                    "label": "Is this element required?"
                  }
                },
                {
                  "className": "section-label",
                  "template": "<hr /><div><strong>Dropdown Elements:</strong></div>"
                },
                {
                  "templateOptions": {
                    "btnText": "Add",
                    "fields": [
                      {
                        "templateOptions": {
                          "required": true,
                          "label": "Name",
                          "placeholder": "The display name associated with the dropdown value"
                        },
                        "key": "name",
                        "type": "horizontalInput"
                      },
                      {
                        "templateOptions": {
                          "required": true,
                          "pattern": "[a-zA-Z0-9_]+",
                          "label": "Value",
                          "placeholder": "The key for the selected dropdown element"
                        },
                        "key": "value",
                        "type": "horizontalInput"
                      }
                    ]
                  },
                  "type": "repeatSection",
                  "key": "options"
                }
              ],
              "default_model": {
                "type": "horizontalSelect",
                "key": "TODO_KEY"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.type = template.element.form_model.type; \n  obj.key = template.element.form_model.key;\n  obj.templateOptions.required = (true === template.element.form_model.required);\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.options = template.element.form_model.options;\n  curr_obj.schema.push(obj)\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Deduplication Service",
        "summary": "An enrichment engine providing deduplication and lookup functionality",
        "row": 6,
        "col": 1,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": true,
          "child_filters": "document_schema",
          "filters": "Bucket/**",
          "categories": "Deduplication",
          "key": "enrichment_meta",
          "sub_keys": "batch_enrichment_meta"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { \n    name: template.element.short_name,\n    entry_point: \"com.ikanow.aleph2.analytics.services.DeduplicationService\",\n    config: {}\n  };\n  a2_inject_enrichment(curr_obj, obj);\n  return obj;\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n  var obj_to_mod;\n  if (Array.isArray(curr_obj)) {\n    obj_to_mod = curr_obj[curr_obj.length - 1];\n  }\n  else if (curr_obj.config) { \n    if (curr_obj.config.enrich_pipeline) {\n\t    obj_to_mod = curr_obj.config.enrich_pipeline[curr_obj.config.enrich_pipeline.length - 1];      \n  \t}\n  \telse obj_to_mod = curr_obj.config; \n  } \n  else obj_to_mod = curr_obj;\n  \n  obj_to_mod.config.doc_schema_override = obj_to_mod.document_schema;\n  obj_to_mod.document_schema = undefined;\n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Horizontal Input",
          "element": {
            "enabled": true,
            "short_name": "Unique Element Name",
            "summary": "A Short Name For This Enrichment Element (Alphanumeric/_ only, no spaces - used for dependencies etc)",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "type": "horizontalInput",
              "key": "_short_name",
              "required": true,
              "pattern": "[a-zA-Z0-9_]+"
            },
            "template": {
              "display_name": "Horizontal Input",
              "form_info": "Compact text input element",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "simple_input",
              "categories": [
                "Text"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "_summary",
                  "type": "horizontalTextArea",
                  "templateOptions": {
                    "label": "Placeholder",
                    "placeholder": "The placeholder text displayed when the input is empty",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                },
                {
                  "key": "required",
                  "type": "horizontalCheckbox",
                  "templateOptions": {
                    "label": "Is this element required?"
                  }
                },
                {
                  "key": "pattern",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Pattern",
                    "placeholder": "Optional validation regular expression",
                    "required": false
                  }
                }
              ],
              "default_model": {
                "type": "horizontalInput",
                "key": "TODO_KEY"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Global Function",
      "element": {
        "enabled": true,
        "short_name": "a2_inject_enrichment",
        "summary": "",
        "row": 0,
        "col": 1,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": false,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "js": "function(curr_obj, obj) {\n  if (Array.isArray(curr_obj)) curr_obj.push(obj); else if (curr_obj.config) { if (curr_obj.config.enrich_pipeline) curr_obj.config.enrich_pipeline.push(obj); else curr_obj.config = obj; } else for (x in obj) curr_obj[x] = obj[x];\n}"
        },
        "template": {
          "display_name": "Global Function",
          "form_info": "<p>Use unique keys as function names to declare global functions that the other templates in this file can use.</p> \n<p>No attempt is made to manage scope etc so use with care</p>",
          "filters": [
            "Template"
          ],
          "expandable": false,
          "key": "global_function",
          "categories": [
            "Developer"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Function Name",
                "placeholder": "The function name (Give it a unique name)",
                "required": true
              }
            },
            {
              "key": "js",
              "type": "code_input",
              "templateOptions": {
                "label": "Global Function",
                "codemirror": {
                  "lineNumbers": true,
                  "smartIndent": true,
                  "mode": "javascript"
                }
              }
            }
          ],
          "default_model": {
            "js": "function(args) {\n  \n}"
          },
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = {};\n  obj.key = template.element.short_name;\n  obj.global_function = { '$fn': template.element.form_model.js };\n  curr_obj.push(obj);\n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": []
    },
    {
      "root": false,
      "label": "Global Function",
      "element": {
        "enabled": true,
        "short_name": "a2_optional_array_from_csv",
        "summary": "",
        "row": 0,
        "col": 0,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": false,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "js": "function(obj) {\n  var out = (obj || '').replace(/\\s*,\\s*/g, \",\").split(\",\").filter(function(x) {return x.length > 0;}); \n  if (out.length > 0) return out; else return undefined;\n}"
        },
        "template": {
          "display_name": "Global Function",
          "form_info": "<p>Use unique keys as function names to declare global functions that the other templates in this file can use.</p> \n<p>No attempt is made to manage scope etc so use with care</p>",
          "filters": [
            "Template"
          ],
          "expandable": false,
          "key": "global_function",
          "categories": [
            "Developer"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Function Name",
                "placeholder": "The function name (Give it a unique name)",
                "required": true
              }
            },
            {
              "key": "js",
              "type": "code_input",
              "templateOptions": {
                "label": "Global Function",
                "codemirror": {
                  "lineNumbers": true,
                  "smartIndent": true,
                  "mode": "javascript"
                }
              }
            }
          ],
          "default_model": {
            "js": "function(args) {\n  \n}"
          },
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = {};\n  obj.key = template.element.short_name;\n  obj.global_function = { '$fn': template.element.form_model.js };\n  curr_obj.push(obj);\n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": []
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Logging Schema",
        "summary": "Contains defaults and overrides for logging output settings",
        "row": 7,
        "col": 1,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": true,
          "key": "logging_schema",
          "categories": "Schema",
          "child_filters": "data_service_schema",
          "filters": "Bucket/**"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Horizontal Checkbox",
          "element": {
            "enabled": true,
            "short_name": "Enabled",
            "summary": "",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "type": "horizontalCheckbox",
              "key": "enabled"
            },
            "template": {
              "display_name": "Horizontal Checkbox",
              "form_info": "Compact checkbox input element",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "simple_input",
              "categories": [
                "Selection"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                }
              ],
              "default_model": {
                "type": "horizontalCheckbox",
                "key": "TODO_KEY"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.type = template.element.form_model.type; \n  obj.key = template.element.form_model.key;\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Horizontal Dropdown",
          "element": {
            "enabled": true,
            "short_name": "Default Log Level",
            "summary": "",
            "row": 1,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "type": "horizontalSelect",
              "key": "log_level",
              "options": [
                {
                  "name": "ALL",
                  "value": "ALL"
                },
                {
                  "name": "TRACE",
                  "value": "TRACE"
                },
                {
                  "name": "DEBUG",
                  "value": "DEBUG"
                },
                {
                  "name": "INFO",
                  "value": "INFO"
                },
                {
                  "name": "WARN",
                  "value": "WARN"
                },
                {
                  "name": "ERROR",
                  "value": "ERROR"
                },
                {
                  "name": "FATAL",
                  "value": "FATAL"
                },
                {
                  "name": "OFF",
                  "value": "OFF"
                }
              ],
              "required": true
            },
            "template": {
              "display_name": "Horizontal Dropdown",
              "form_info": "Compact dropdown element",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "simple_input",
              "categories": [
                "Selection"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                },
                {
                  "key": "required",
                  "type": "horizontalCheckbox",
                  "templateOptions": {
                    "label": "Is this element required?"
                  }
                },
                {
                  "className": "section-label",
                  "template": "<hr /><div><strong>Dropdown Elements:</strong></div>"
                },
                {
                  "templateOptions": {
                    "btnText": "Add",
                    "fields": [
                      {
                        "templateOptions": {
                          "required": true,
                          "label": "Name",
                          "placeholder": "The display name associated with the dropdown value"
                        },
                        "key": "name",
                        "type": "horizontalInput"
                      },
                      {
                        "templateOptions": {
                          "required": true,
                          "pattern": "[a-zA-Z0-9_]+",
                          "label": "Value",
                          "placeholder": "The key for the selected dropdown element"
                        },
                        "key": "value",
                        "type": "horizontalInput"
                      }
                    ]
                  },
                  "type": "repeatSection",
                  "key": "options"
                }
              ],
              "default_model": {
                "type": "horizontalSelect",
                "key": "TODO_KEY"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.type = template.element.form_model.type; \n  obj.key = template.element.form_model.key;\n  obj.templateOptions.required = (true === template.element.form_model.required);\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.options = template.element.form_model.options;\n  curr_obj.schema.push(obj)\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Repeating Section",
          "element": {
            "enabled": true,
            "short_name": "Log Level Overrides Repeater",
            "summary": "adds a text box and dropdown for selecting override service and level",
            "row": 2,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": true,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "key": "ll_overrides",
              "type": "repeatSection",
              "btnText": "Add"
            },
            "template": {
              "display_name": "Repeating Section",
              "form_info": "Create a sub-form under here",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": true,
              "key": "template_builder",
              "categories": [
                "Layout"
              ],
              "schema": [
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "placeholder": "Enter a key for this repeater",
                    "required": true
                  }
                },
                {
                  "key": "btnText",
                  "type": "horizontalInput",
                  "defaultValue": "Add",
                  "templateOptions": {
                    "label": "Add Button Name",
                    "placeholder": "Enter the name for this button",
                    "required": true
                  }
                }
              ],
              "default_model": {
                "key": "ADD_KEY_HERE",
                "type": "repeatSection",
                "btnText": "Add"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n  var m = template.element.form_model;\n  var obj = { templateOptions: { schema: [] } }; \n  curr_obj.schema.push(obj); \n  obj.type = m.type; \n  obj.key = m.key; \n  obj.templateOptions.btnText = m.btnText;\n  return obj.templateOptions;   \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar me = curr_obj.schema[curr_obj.schema.length-1]; \n  me.templateOptions.fields = me.templateOptions.schema;\n  me.templateOptions.schema = undefined;  \n}"
              }
            }
          },
          "children": [
            {
              "root": false,
              "label": "Row/Column Layout",
              "element": {
                "enabled": true,
                "short_name": "Log Level Overrides Columns",
                "summary": "Override specific services default log level",
                "row": 0,
                "col": 0,
                "sizeX": 1,
                "sizeY": 1,
                "expandable": true,
                "configurable": true,
                "deletable": true,
                "form_model": {
                  "class": "row",
                  "columns": [
                    "8",
                    "4"
                  ]
                },
                "template": {
                  "display_name": "Row/Column Layout",
                  "form_info": "Add a row and define the layout of columns",
                  "filters": [
                    "Template/template_builder",
                    "Template/template_builder/**"
                  ],
                  "expandable": true,
                  "key": "template_builder",
                  "categories": [
                    "Layout"
                  ],
                  "schema": [
                    {
                      "type": "multiInput",
                      "templateOptions": {
                        "inputOptions": {
                          "type": "select",
                          "templateOptions": {
                            "options": [
                              {
                                "name": "0",
                                "value": "0"
                              },
                              {
                                "name": "1",
                                "value": "1"
                              },
                              {
                                "name": "2",
                                "value": "2"
                              },
                              {
                                "name": "3",
                                "value": "3"
                              },
                              {
                                "name": "4",
                                "value": "4"
                              },
                              {
                                "name": "5",
                                "value": "5"
                              },
                              {
                                "name": "6",
                                "value": "6"
                              },
                              {
                                "name": "7",
                                "value": "7"
                              },
                              {
                                "name": "8",
                                "value": "8"
                              },
                              {
                                "name": "9",
                                "value": "9"
                              },
                              {
                                "name": "10",
                                "value": "10"
                              },
                              {
                                "name": "11",
                                "value": "11"
                              }
                            ]
                          }
                        },
                        "label": "Column widths (must add up to <= 12)"
                      },
                      "key": "columns"
                    }
                  ],
                  "default_model": {
                    "class": "row"
                  },
                  "building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n var m = template.element.form_model;\n var obj = { schema: [] }; \n curr_obj.schema.push(obj); \n obj.className = m.class; \n return obj; \n}"
                  },
                  "post_building_function": {
                    "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var me = curr_obj.schema[curr_obj.schema.length-1]; \n  me.fieldGroup = me.schema;\n  me.schema = undefined;\n  if (template.element.form_model.columns) {\n    for (i in template.element.form_model.columns) {\n      var col = template.element.form_model.columns[i];\n      me.fieldGroup[i].className = 'col-xs-' + col;\n    }\n  }\n}"
                  }
                }
              },
              "children": [
                {
                  "root": false,
                  "label": "Horizontal Input",
                  "element": {
                    "enabled": true,
                    "short_name": "Service Name",
                    "summary": "storage_service",
                    "row": 0,
                    "col": 0,
                    "sizeX": 1,
                    "sizeY": 1,
                    "expandable": false,
                    "configurable": true,
                    "deletable": true,
                    "form_model": {
                      "type": "horizontalInput",
                      "key": "service_name",
                      "required": true
                    },
                    "template": {
                      "display_name": "Horizontal Input",
                      "form_info": "Compact text input element",
                      "filters": [
                        "Template/template_builder",
                        "Template/template_builder/**"
                      ],
                      "expandable": false,
                      "key": "simple_input",
                      "categories": [
                        "Text"
                      ],
                      "schema": [
                        {
                          "key": "_short_name",
                          "type": "horizontalInput",
                          "templateOptions": {
                            "label": "Label",
                            "placeholder": "The label displayed next to the input",
                            "required": true
                          }
                        },
                        {
                          "key": "_summary",
                          "type": "horizontalTextArea",
                          "templateOptions": {
                            "label": "Placeholder",
                            "placeholder": "The placeholder text displayed when the input is empty",
                            "required": true
                          }
                        },
                        {
                          "key": "key",
                          "type": "horizontalInput",
                          "templateOptions": {
                            "label": "Key",
                            "pattern": "[a-zA-Z0-9_]+",
                            "placeholder": "The key for this input",
                            "required": true
                          }
                        },
                        {
                          "key": "required",
                          "type": "horizontalCheckbox",
                          "templateOptions": {
                            "label": "Is this element required?"
                          }
                        },
                        {
                          "key": "pattern",
                          "type": "horizontalInput",
                          "templateOptions": {
                            "label": "Pattern",
                            "placeholder": "Optional validation regular expression",
                            "required": false
                          }
                        }
                      ],
                      "default_model": {
                        "type": "horizontalInput",
                        "key": "TODO_KEY"
                      },
                      "building_function": {
                        "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
                      },
                      "post_building_function": {
                        "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
                      }
                    }
                  },
                  "children": []
                },
                {
                  "root": false,
                  "label": "Horizontal Dropdown",
                  "element": {
                    "enabled": true,
                    "short_name": "Logging Level",
                    "summary": "level to log this specific service at",
                    "row": 0,
                    "col": 1,
                    "sizeX": 1,
                    "sizeY": 1,
                    "expandable": false,
                    "configurable": true,
                    "deletable": true,
                    "form_model": {
                      "type": "horizontalSelect",
                      "key": "service_level",
                      "options": [
                        {
                          "name": "ALL",
                          "value": "ALL"
                        },
                        {
                          "name": "TRACE",
                          "value": "TRACE"
                        },
                        {
                          "name": "DEBUG",
                          "value": "DEBUG"
                        },
                        {
                          "name": "INFO",
                          "value": "INFO"
                        },
                        {
                          "name": "WARN",
                          "value": "WARN"
                        },
                        {
                          "name": "ERROR",
                          "value": "ERROR"
                        },
                        {
                          "name": "FATAL",
                          "value": "FATAL"
                        },
                        {
                          "name": "OFF",
                          "value": "OFF"
                        }
                      ],
                      "required": true
                    },
                    "template": {
                      "display_name": "Horizontal Dropdown",
                      "form_info": "Compact dropdown element",
                      "filters": [
                        "Template/template_builder",
                        "Template/template_builder/**"
                      ],
                      "expandable": false,
                      "key": "simple_input",
                      "categories": [
                        "Selection"
                      ],
                      "schema": [
                        {
                          "key": "_short_name",
                          "type": "horizontalInput",
                          "templateOptions": {
                            "label": "Label",
                            "placeholder": "The label displayed next to the input",
                            "required": true
                          }
                        },
                        {
                          "key": "key",
                          "type": "horizontalInput",
                          "templateOptions": {
                            "label": "Key",
                            "pattern": "[a-zA-Z0-9_]+",
                            "placeholder": "The key for this input",
                            "required": true
                          }
                        },
                        {
                          "key": "required",
                          "type": "horizontalCheckbox",
                          "templateOptions": {
                            "label": "Is this element required?"
                          }
                        },
                        {
                          "className": "section-label",
                          "template": "<hr /><div><strong>Dropdown Elements:</strong></div>"
                        },
                        {
                          "templateOptions": {
                            "btnText": "Add",
                            "fields": [
                              {
                                "templateOptions": {
                                  "required": true,
                                  "label": "Name",
                                  "placeholder": "The display name associated with the dropdown value"
                                },
                                "key": "name",
                                "type": "horizontalInput"
                              },
                              {
                                "templateOptions": {
                                  "required": true,
                                  "pattern": "[a-zA-Z0-9_]+",
                                  "label": "Value",
                                  "placeholder": "The key for the selected dropdown element"
                                },
                                "key": "value",
                                "type": "horizontalInput"
                              }
                            ]
                          },
                          "type": "repeatSection",
                          "key": "options"
                        }
                      ],
                      "default_model": {
                        "type": "horizontalSelect",
                        "key": "TODO_KEY"
                      },
                      "building_function": {
                        "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.type = template.element.form_model.type; \n  obj.key = template.element.form_model.key;\n  obj.templateOptions.required = (true === template.element.form_model.required);\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.options = template.element.form_model.options;\n  curr_obj.schema.push(obj)\n}"
                      },
                      "post_building_function": {
                        "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
                      }
                    }
                  },
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 2,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var logging_schema = {};\n  logging_schema.enabled = template.element.form_model.enabled;\n  logging_schema.log_level = template.element.form_model.log_level;\n  var overrides_map = {};\n  var ll_overrides = template.element.form_model.ll_overrides;\n  for ( var x in ll_overrides ) {\n    var ll_override = ll_overrides[x];\n    overrides_map[ll_override.service_name] = ll_override.service_level;\n  }\n  logging_schema.log_level_overrides = overrides_map;\n  curr_obj.logging_schema = logging_schema;\n return logging_schema;\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Default Values UI",
          "element": {
            "enabled": true,
            "short_name": "Default Values UI",
            "summary": "",
            "row": 2,
            "col": 2,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "default_values": [
                {
                  "key": "enabled",
                  "value": "true"
                },
                {
                  "value": "ERROR",
                  "key": "log_level"
                }
              ]
            },
            "template": {
              "display_name": "Default Values UI",
              "form_info": "Select starting values for the various keys",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "templateOptions": {
                    "btnText": "Add",
                    "fields": [
                      {
                        "templateOptions": {
                          "required": true,
                          "pattern": "[a-zA-Z0-9_-]+",
                          "label": "Key",
                          "placeholder": "The key to which to assign a default value"
                        },
                        "key": "key",
                        "type": "horizontalInput"
                      },
                      {
                        "templateOptions": {
                          "required": true,
                          "label": "Value",
                          "placeholder": "The default value for this key"
                        },
                        "key": "value",
                        "type": "horizontalInput"
                      }
                    ]
                  },
                  "type": "repeatSection",
                  "key": "default_values"
                }
              ],
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  curr_obj.default_model = {};\n  for (i in template.element.form_model.default_values) {\n    var el = template.element.form_model.default_values[i];\n    curr_obj.default_model[el.key] = el.value;\n  }\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Management Schema",
        "summary": "General Management Schema",
        "row": 7,
        "col": 0,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": true,
          "key": "management_schema",
          "categories": "Metadata",
          "child_filters": "logging_schema",
          "filters": "Bucket",
          "sub_keys": ""
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  curr_obj.management_schema = {}; \n  return curr_obj.management_schema;\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "short_name": "Global Raw JSON Batch Technology Override",
        "summary": "Applies the raw technology output to all the batch pipeline elements. Should be at the end of the list of batch elements to process.",
        "row": 6,
        "col": 2,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": false,
          "key": "batch_technology_override",
          "categories": "Technology Overrides",
          "filters": "Bucket/**"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        }
      },
      "children": [
        {
          "root": false,
          "label": "Code Editor",
          "element": {
            "enabled": true,
            "short_name": "Technology Override Schema",
            "summary": "Raw JSON that is applied to batch elements",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "type": "code_input",
              "templateOptions": {
                "codemirror": {
                  "lineNumbers": true,
                  "smartIndent": true,
                  "mode": "javascript"
                },
                "label": "Technology Override Schema",
                "required": false
              },
              "mode": "javascript",
              "key": "technology_override",
              "required": false
            },
            "template": {
              "display_name": "Code Editor",
              "form_info": "Write code in various languages (or JSON/XML/HTML)",
              "filters": [
                "Template/template_builder",
                "Template/template_builder/**"
              ],
              "expandable": false,
              "key": "simple_input",
              "categories": [
                "Text"
              ],
              "schema": [
                {
                  "key": "_short_name",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Label",
                    "placeholder": "The label displayed next to the input",
                    "required": true
                  }
                },
                {
                  "key": "key",
                  "type": "horizontalInput",
                  "templateOptions": {
                    "label": "Key",
                    "pattern": "[a-zA-Z0-9_]+",
                    "placeholder": "The key for this input",
                    "required": true
                  }
                },
                {
                  "key": "required",
                  "type": "horizontalCheckbox",
                  "templateOptions": {
                    "label": "Is this element required?"
                  }
                },
                {
                  "templateOptions": {
                    "required": true,
                    "label": "Language",
                    "options": [
                      {
                        "value": "clike",
                        "name": "Scala"
                      },
                      {
                        "value": "javascript",
                        "name": "Javascript/JSON"
                      },
                      {
                        "value": "r",
                        "name": "R"
                      },
                      {
                        "value": "python",
                        "name": "Python"
                      },
                      {
                        "value": "xml",
                        "name": "XML"
                      },
                      {
                        "value": "lua",
                        "name": "Lua"
                      },
                      {
                        "value": "yaml",
                        "name": "YAML"
                      },
                      {
                        "value": "properties",
                        "name": "Properties"
                      },
                      {
                        "value": "htmlembedded",
                        "name": "HTML (embedded)"
                      },
                      {
                        "value": "htmlmixed",
                        "name": "HTML (mixed)"
                      }
                    ]
                  },
                  "type": "horizontalSelect",
                  "key": "mode"
                }
              ],
              "default_model": {
                "type": "code_input",
                "templateOptions": {
                  "codemirror": {
                    "lineNumbers": true,
                    "smartIndent": true
                  }
                }
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { \n    key: template.element.form_model.key,\n    type: template.element.form_model.type,\n    templateOptions: template.element.form_model.templateOptions \n  };\n  obj.templateOptions.codemirror.mode = template.element.form_model.mode;\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.required = template.element.form_model.required;\n  curr_obj.schema.push(obj);\n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Default Values",
          "element": {
            "enabled": true,
            "short_name": "Raw Default Values",
            "summary": "",
            "row": 0,
            "col": 1,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "{\n\t\"technology_override\": \"{\\n}\"\n}"
            },
            "template": {
              "display_name": "Raw Default Values",
              "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Model JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "json": "{\n\n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "",
            "row": 0,
            "col": 2,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var array = [];\n  if (Array.isArray(curr_obj)) \n    array = curr_obj; \n  else if (curr_obj.config) \n    array = curr_obj.config.enrich_pipeline;\n  \n  for (var e in array) {\n    array[e].technology_override = JSON.parse(template.element.form_model.technology_override);\n  }\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Validation Functions",
          "element": {
            "enabled": true,
            "short_name": "Validation Functions",
            "summary": "",
            "row": 0,
            "col": 3,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var array = [];\n  if (Array.isArray(curr_obj)) \n    array = curr_obj; \n  else if (curr_obj.config) \n    array = curr_obj.config.enrich_pipeline;\n\n  if (array.length == 0) errs.push(\"Can't be the first element in the pipeline\");\n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Validation Functions",
              "form_info": "<p>Write functions to validate the fields of the forms</p>\n<p>validation_function runs before the element's children; post_validation_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Validation Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Validation Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.validation_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_validation_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "row": 4,
        "col": 3,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": true,
          "key": "data_service_schema",
          "sub_keys": "",
          "categories": "Schema",
          "filters": "Bucket/**",
          "child_filters": "enrichment_meta"
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        },
        "short_name": "Raw JSON Graph Schema",
        "summary": "For advanced users: create an empty graph schema JSON object that can be Raw JSON to provide the desired functionality"
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "Creating the element from JSON",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { \n  curr_obj.graph_schema = JSON.parse(template.element.form_model.schema || '{}'); \n  curr_obj.graph_schema.custom_configs = []; \n  return curr_obj.graph_schema.custom_configs; \n}",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n   curr_obj.graph_schema.custom_decomposition_configs = curr_obj.graph_schema.custom_decomposition_configs || [];\n   curr_obj.graph_schema.custom_merge_configs = curr_obj.graph_schema.custom_merge_configs || [];\n  for (var x in curr_obj.graph_schema.custom_configs) {\n    var el = curr_obj.graph_schema.custom_configs[x];\n    if (null != el.name) {\n      if (el.name.startsWith(\"merge\")) {\n        curr_obj.graph_schema.custom_merge_configs.push(el);\n      }\n      if (el.name.startsWith(\"decomp\")) {\n        curr_obj.graph_schema.custom_decomposition_configs.push(el);\n      }\n    }\n  }\n  delete curr_obj.graph_schema.custom_configs;\n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"schema\",\"type\":\"code_input\",\"defaultValue\":\"{\\n}\",\"templateOptions\":{\"label\":\"Graph Schema JSON\",\"codemirror\":{\"lineNumbers\":true,\"smartIndent\":true,\"mode\":\"javascript\"}}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 1,
            "short_name": "Graph Schema JSON",
            "summary": "Type: code_input"
          },
          "children": []
        }
      ]
    },
    {
      "root": false,
      "label": "Template Builder",
      "element": {
        "enabled": true,
        "row": 5,
        "col": 2,
        "sizeX": 1,
        "sizeY": 1,
        "expandable": true,
        "configurable": true,
        "deletable": true,
        "form_model": {
          "expandable": false,
          "key": "data_service_schema",
          "sub_keys": "",
          "categories": "Schema",
          "filters": "Bucket/**",
          "child_filters": ""
        },
        "template": {
          "display_name": "Template Builder",
          "form_info": "Create a new template element",
          "filters": [
            "Template"
          ],
          "expandable": true,
          "key": "template_builder",
          "categories": [
            "Template"
          ],
          "schema": [
            {
              "key": "_short_name",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Template Name",
                "placeholder": "The template name",
                "required": true
              }
            },
            {
              "key": "_summary",
              "type": "horizontalTextArea",
              "defaultValue": "<p>Help here</p>",
              "templateOptions": {
                "label": "Form Info",
                "placeholder": "Text or HTML providing help for the user",
                "required": true
              }
            },
            {
              "key": "key",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Role/Key",
                "placeholder": "The role name of the template (used in parent and child filters)",
                "required": true
              }
            },
            {
              "key": "sub_keys",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Sub-Role/Keys",
                "placeholder": "Optional sub-keys used only in child filters",
                "required": false
              }
            },
            {
              "key": "categories",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Categories",
                "placeholder": "Comma-separated list of categories (determines folder name)",
                "required": true
              }
            },
            {
              "key": "filters",
              "type": "horizontalInput",
              "templateOptions": {
                "label": "Parent Filters",
                "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
                "required": false
              }
            },
            {
              "key": "expandable",
              "type": "horizontalCheckbox",
              "defaultValue": false,
              "templateOptions": {
                "label": "Allow child elements",
                "required": false
              }
            },
            {
              "key": "child_filters",
              "type": "horizontalInput",
              "hideExpression": "!model.expandable",
              "templateOptions": {
                "label": "Child Filters",
                "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
                "required": false
              }
            }
          ],
          "building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.sub_keys = a2_csv_to_array(obj.sub_keys);\n  \t\tif (0 == (obj.sub_keys || []).length) obj.sub_keys = undefined;\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
          },
          "post_building_function": {
            "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
          }
        },
        "short_name": "Raw JSON Data Warehouse Schema",
        "summary": "For advanced users: create an empty data warehouse schema JSON object that can be Raw JSON to provide the desired functionality"
      },
      "children": [
        {
          "root": false,
          "label": "Builder Functions",
          "element": {
            "enabled": true,
            "short_name": "Builder Functions",
            "summary": "Creating the element from JSON",
            "row": 0,
            "col": 0,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "deletable": true,
            "form_model": {
              "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { curr_obj.data_warehouse_schema = JSON.parse(template.element.form_model.schema || '{}'); return curr_obj.storage_schema; }",
              "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
            },
            "template": {
              "display_name": "Builder Functions",
              "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
              "filters": [
                "Template/template_builder"
              ],
              "expandable": false,
              "key": "local_function",
              "categories": [
                "Developer"
              ],
              "schema": [
                {
                  "key": "pre_fn",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                },
                {
                  "key": "post_fn",
                  "type": "code_input",
                  "defaultValue": "{\n}",
                  "templateOptions": {
                    "label": "Post Building Function",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ],
              "default_model": {
                "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
                "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              },
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
              },
              "post_building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
              }
            }
          },
          "children": []
        },
        {
          "root": false,
          "label": "Raw Form JSON",
          "element": {
            "enabled": true,
            "sizeX": 1,
            "sizeY": 1,
            "expandable": false,
            "configurable": true,
            "deletable": true,
            "form_model": {
              "json": "[{\"key\":\"schema\",\"type\":\"code_input\",\"defaultValue\":\"{\\n}\",\"templateOptions\":{\"label\":\"Data Warehouse Schema JSON\",\"codemirror\":{\"lineNumbers\":true,\"smartIndent\":true,\"mode\":\"javascript\"}}}]"
            },
            "template": {
              "display_name": "Raw Form JSON",
              "key": "template_element",
              "categories": [
                "Generic"
              ],
              "filters": [
                "Template/template_builder",
                "Template/**/template_builder"
              ],
              "expandable": false,
              "form_info": "Type raw JSON objects into here to insert them into the schema",
              "building_function": {
                "_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
              },
              "default_model": {
                "json": "[\n\t\t{\n\t\t\t\"key\": \"_short_name\",\n\t\t\t\"type\": \"horizontalInput\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Function Name\",\n\t\t\t\t\"placeholder\": \"The function name (Give it a unique name)\",\n\t\t\t\t\"required\": true\n\t\t\t}\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"key\": \"js\",\n\t\t\t\"type\": \"code_input\",\n\t\t\t\"templateOptions\": {\n\t\t\t\t\"label\": \"Global Function\",\n\t\t\t\t\"codemirror\": {\n\t\t\t\t\t\"lineNumbers\": true,\n\t\t\t\t\t\"smartIndent\": true,\n\t\t\t\t\t\"mode\": \"javascript\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n]"
              },
              "schema": [
                {
                  "key": "json",
                  "type": "code_input",
                  "templateOptions": {
                    "label": "Raw Form JSON",
                    "codemirror": {
                      "lineNumbers": true,
                      "smartIndent": true,
                      "mode": "javascript"
                    }
                  }
                }
              ]
            },
            "row": 0,
            "col": 1,
            "short_name": "Data Warehouse Schema JSON",
            "summary": "Type: code_input"
          },
          "children": []
        }
      ]
    }
  ]
}