[
  {
    "key": "a2_copy",
    "global_function": {
      "$fn": "function(from, to) { \n  for (x in from) to[x] = from[x]; \n}"
    }
  },
  {
    "key": "a2_csv_to_array",
    "global_function": {
      "$fn": "function(csv) { \n  var x = (csv || '').replace(/\\\\s*,\\\\s*/g, \",\").split(\",\"); \n  var r = []; \n  for (i in x) if (x[i].length > 0) r.push(x[i]) ; \n  return (r.length > 0) ? r : undefined; \n}"
    }
  },
  {
    "display_name": "Global Function",
    "form_info": "<p>Use unique keys as function names to declare global functions that the other templates in this file can use.</p> \n<p>No attempt is made to manage scope etc so use with care</p>",
    "filters": [
      "Template/"
    ],
    "expandable": false,
    "key": "global_function",
    "categories": [
      "Developer"
    ],
    "schema": [
      {
        "key": "_short_name",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Function Name",
          "placeholder": "The function name (Give it a unique name)",
          "required": true
        }
      },
      {
        "key": "js",
        "type": "code_input",
        "templateOptions": {
          "label": "Global Function",
          "codemirror": {
            "lineNumbers": true,
            "smartIndent": true,
            "mode": "javascript"
          }
        }
      }
    ],
    "default_model": {
      "js": "function(args) {\n  \n}"
    },
    "building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  curr_obj.key = template.element.short_name;\n  curr_obj.global_function = { '$fn': template.element.form_model.js };\n}"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    }
  },
  {
    "display_name": "Builder Functions",
    "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
    "filters": [
      "Template/template_builder"
    ],
    "expandable": false,
    "key": "local_function",
    "categories": [
      "Developer"
    ],
    "schema": [
      {
        "key": "pre_fn",
        "type": "code_input",
        "templateOptions": {
          "label": "Building Function",
          "codemirror": {
            "lineNumbers": true,
            "smartIndent": true,
            "mode": "javascript"
          }
        }
      },
      {
        "key": "post_fn",
        "type": "code_input",
        "defaultValue": "{\n}",
        "templateOptions": {
          "label": "Post Building Function",
          "codemirror": {
            "lineNumbers": true,
            "smartIndent": true,
            "mode": "javascript"
          }
        }
      }
    ],
    "default_model": {
      "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
      "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    },
    "building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    }
  },
  {
    "display_name": "Validation Functions",
    "form_info": "<p>Write functions to validate the fields of the forms</p>\n<p>validation_function runs before the element's children; post_validation_function runs afterwards</p>",
    "filters": [
      "Template/template_builder"
    ],
    "expandable": false,
    "key": "local_function",
    "categories": [
      "Developer"
    ],
    "schema": [
      {
        "key": "pre_fn",
        "type": "code_input",
        "templateOptions": {
          "label": "Validation Function",
          "codemirror": {
            "lineNumbers": true,
            "smartIndent": true,
            "mode": "javascript"
          }
        }
      },
      {
        "key": "post_fn",
        "type": "code_input",
        "defaultValue": "{\n}",
        "templateOptions": {
          "label": "Post Validation Function",
          "codemirror": {
            "lineNumbers": true,
            "smartIndent": true,
            "mode": "javascript"
          }
        }
      }
    ],
    "default_model": {
      "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
      "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    },
    "building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.validation_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_validation_function = {'$fn': template.element.form_model.post_fn}; \n}"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    }
  },
  {
    "display_name": "Template Builder",
    "form_info": "Create a new template element",
    "filters": [
      "Template"
    ],
    "expandable": true,
    "key": "template_builder",
    "categories": [
      "Template"
    ],
    "schema": [
      {
        "key": "_short_name",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Template Name",
          "placeholder": "The template name",
          "required": true
        }
      },
      {
        "key": "_summary",
        "type": "horizontalTextArea",
        "defaultValue": "<p>Help here</p>",
        "templateOptions": {
          "label": "Form Info",
          "placeholder": "Text or HTML providing help for the user",
          "required": true
        }
      },
      {
        "key": "key",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Role/Key",
          "placeholder": "The role name of the template (used in parent and child filters)",
          "required": true
        }
      },
      {
        "key": "categories",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Categories",
          "placeholder": "Comma-separated list of categories (determines folder name)",
          "required": true
        }
      },
      {
        "key": "filters",
        "type": "horizontalInput",
        "defaultValue": "Template/template_builder/**",
        "templateOptions": {
          "label": "Parent Filters",
          "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
          "required": false
        }
      },
      {
        "key": "expandable",
        "type": "horizontalCheckbox",
        "defaultValue": false,
        "templateOptions": {
          "label": "Allow child elements",
          "required": false
        }
      },
      {
        "key": "child_filters",
        "type": "horizontalInput",
        "hideExpression": "!model.expandable",
        "templateOptions": {
          "label": "Child Filters",
          "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
          "required": false
        }
      }
    ],
    "building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    }
  },
  {
    "display_name": "Raw Default Values",
    "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
    "filters": [
      "Template/template_builder"
    ],
    "expandable": false,
    "key": "template_element",
    "categories": [
      "Generic"
    ],
    "schema": [
      {
        "key": "json",
        "type": "code_input",
        "templateOptions": {
          "label": "Model JSON",
          "codemirror": {
            "lineNumbers": true,
            "smartIndent": true,
            "mode": "javascript"
          }
        }
      }
    ],
    "default_model": {
      "json": "{\n\n}"
    },
    "building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); \n}"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    }
  }
,






{
	"display_name": "Raw Form JSON",
	"key": "template_element",
	"categories": ["Generic"],
	"filters": ["Template/template_builder", "Template/**/template_builder"],
	"expandable": false,
	"form_info": "Type raw JSON objects into here to insert them into the schema",
	"building_function": { 
		"$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var obj = eval('(' + template.element.form_model.json + ')'); for (i in obj) curr_obj.schema.push(obj[i]); }"
	},	
	"default_model": {
		"json": "[\n  {\n    \n  }\n]"
	},
	"schema": [
		{
			"key": "json",
			"type": "code_input",
			"templateOptions": {
				"label": "Raw Form JSON",
				"codemirror": {
					"lineNumbers": true,
					"smartIndent": true,
					"mode": "javascript"
				}
			}
		}
	]
},
{
	"display_name": "Raw HTML template",
	"key": "template_element",
	"categories": ["Layout"],
	"filters": ["Template/template_builder", "Template/**/template_builder"],
	"expandable": false,
	"form_info": "Type Raw HTML into here to insert them into the schema",
	"building_function": { 
		"$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { curr_obj.schema.push({template: template.element.form_model.html}); }"
	},	
	"default_model": {
		"html": ""
	},
	"schema": [
		{
			"key": "html",
			"type": "code_input",
			"templateOptions": {
				"label": "HTML template",
				"codemirror": {
					"lineNumbers": true,
					"smartIndent": true,
					"mode": "htmlembedded"
				}
			}
		}
	]
},
{
	"display_name": "Horizontal line",
	"key": "template_element",
	"categories": ["Layout"],
	"filters": ["Template/template_builder", "Template/**/template_builder"],
	"expandable": false,
	"form_info": "Inserts a horizontal line",
	"default_model": {
		"html": "<hr/>"
	},
	"building_function": { 
		"$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { curr_obj.schema.push({template: template.element.form_model.html}); }"
	},	
	"schema": [
	]
},
{
	"display_name": "Repeating Section",
	"key": "template_builder",
	"categories": ["Layout"],
	"filters": ["Template/template_builder", "Template/**/template_builder"],
	"expandable": true,
	"form_info": "Create a sub-form under here",
	"default_model": {
		"key": "ADD_KEY_HERE",
		"type": "repeatSection",
		"btnText": "Add"
	},
	"building_function": { 
		"$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var m = template.element.form_model;var obj = { templateOptions: { schema: [] } }; curr_obj.schema.push(obj); obj.type = m.type; obj.key = m.key; obj.templateOptions.btnText = m.btnText;return obj.templateOptions; }",
		"expr1": "var obj = { templateOptions: { schema:[] } }; curr_obj.schema.push(obj); ",
		"expr2": " obj.type = m.type; obj.key = m.key; obj.templateOptions.btnText = m.btnText;",
		"expr3": "return obj.templateOptions;"
	},	
	"post_building_function": { 
		"$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var me = curr_obj.schema[curr_obj.schema.length-1]; me.templateOptions.fields = me.templateOptions.schema;me.templateOptions.schema = undefined; }"
	},
	"schema": [
		{
			"key": "key",
			"type": "horizontalInput",
			"templateOptions": {
				"label": "Key",
				"placeholder": "Enter a key for this repeater",
				"required": true
			}			
		},
		{
			"key": "btnText",
			"type": "horizontalInput",
			"defaultValue": "Add",
			"templateOptions": {
				"label": "Add Button Name",
				"placeholder": "Enter the name for this button",
				"required": true
			}			
		}		
	]
},
{
	"display_name": "Row/Column Layout",
	"key": "template_builder",
	"categories": ["Layout"],
	"filters": ["Template/template_builder", "Template/**/template_builder"],
	"expandable": true,
	"form_info": "Add ",
	"default_model": {
		"class": "row"
	},
	"building_function": { 
		"$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var m = template.element.form_model;var obj = { schema: [] }; curr_obj.schema.push(obj); obj.className = m.class; return obj; }",
		"expr1": "var obj = { schema:[] }; curr_obj.schema.push(obj); ",
		"expr2": "obj.className = m.class;",
		"expr3": "return obj;"
	},	
	"post_building_function": { 
		"$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) { var me = curr_obj.schema[curr_obj.schema.length-1]; me.fieldGroup = me.schema;me.schema = undefined; }"
	},
	"schema": [
	]
}
]