[
  {
    "display_name": "Global Function",
    "form_info": "<p>Use unique keys as function names to declare global functions that the other templates in this file can use.</p> \n<p>No attempt is made to manage scope etc so use with care</p>",
    "filters": [
      "Template/"
    ],
    "expandable": false,
    "key": "global_function",
    "categories": [
      "Developer"
    ],
    "schema": [
      {
        "key": "_short_name",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Function Name",
          "placeholder": "The function name (Give it a unique name)",
          "required": true
        }
      },
      {
        "key": "js",
        "type": "code_input",
        "templateOptions": {
          "label": "Global Function",
          "codemirror": {
            "lineNumbers": true,
            "smartIndent": true,
            "mode": "javascript"
          }
        }
      }
    ],
    "default_model": {
      "js": "function(args) {\n  \n}"
    },
    "building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  curr_obj.key = template.element.short_name;\n  curr_obj.global_function = { '$fn': template.element.form_model.js };\n}"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    }
  },
  {
    "key": "a2_copy",
    "global_function": {
      "$fn": "function(from, to) { \n  for (x in from) to[x] = from[x]; \n}"
    }
  },
  {
    "key": "a2_csv_to_array",
    "global_function": {
      "$fn": "function(csv) { \n  var x = (csv || '').replace(/\\s*,\\s*/g, \",\").split(\",\"); \n  var r = []; \n  for (i in x) if (x[i].length > 0) r.push(x[i]) ; \n  return (r.length > 0) ? r : undefined; \n}"
    }
  },
  {
    "display_name": "Template Builder",
    "form_info": "Create a new template element",
    "filters": [
      "Template"
    ],
    "expandable": true,
    "key": "template_builder",
    "categories": [
      "Template"
    ],
    "schema": [
      {
        "key": "_short_name",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Template Name",
          "placeholder": "The template name",
          "required": true
        }
      },
      {
        "key": "_summary",
        "type": "horizontalTextArea",
        "defaultValue": "<p>Help here</p>",
        "templateOptions": {
          "label": "Form Info",
          "placeholder": "Text or HTML providing help for the user",
          "required": true
        }
      },
      {
        "key": "key",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Role/Key",
          "placeholder": "The role name of the template (used in parent and child filters)",
          "required": true
        }
      },
      {
        "key": "categories",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Categories",
          "placeholder": "Comma-separated list of categories (determines folder name)",
          "required": true
        }
      },
      {
        "key": "filters",
        "type": "horizontalInput",
        "defaultValue": "Template/template_builder/**",
        "templateOptions": {
          "label": "Parent Filters",
          "placeholder": "Comma-separated list of filters determining for which parents this should be displayed",
          "required": false
        }
      },
      {
        "key": "expandable",
        "type": "horizontalCheckbox",
        "defaultValue": false,
        "templateOptions": {
          "label": "Allow child elements",
          "required": false
        }
      },
      {
        "key": "child_filters",
        "type": "horizontalInput",
        "hideExpression": "!model.expandable",
        "templateOptions": {
          "label": "Child Filters",
          "placeholder": "Comma-separated list of filters determining which child elements should be displayed",
          "required": false
        }
      }
    ],
    "building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\t\tvar obj = {}; \n\t\tobj.display_name = template.element.short_name; \n\t\tobj.form_info = template.element.summary;\n\t\ta2_copy(template.element.form_model, obj);\n\t\tobj.categories = a2_csv_to_array(obj.categories);\n\t\tobj.filters = a2_csv_to_array(obj.filters);\n\t\tobj.child_filters = a2_csv_to_array(obj.child_filters);\n\t\tobj.schema = []; \n\t\tcurr_obj.push(obj); \n\t\treturn obj;  \n}"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    }
  },
  {
    "display_name": "Builder Functions",
    "form_info": "<p>Write functions to build the objects and sub-objects based on the fields of the forms</p>\n<p>builder_function runs before the element's children; post_builder_function runs afterwards</p>",
    "filters": [
      "Template/template_builder"
    ],
    "expandable": false,
    "key": "local_function",
    "categories": [
      "Developer"
    ],
    "schema": [
      {
        "key": "pre_fn",
        "type": "code_input",
        "templateOptions": {
          "label": "Building Function",
          "codemirror": {
            "lineNumbers": true,
            "smartIndent": true,
            "mode": "javascript"
          }
        }
      },
      {
        "key": "post_fn",
        "type": "code_input",
        "defaultValue": "{\n}",
        "templateOptions": {
          "label": "Post Building Function",
          "codemirror": {
            "lineNumbers": true,
            "smartIndent": true,
            "mode": "javascript"
          }
        }
      }
    ],
    "default_model": {
      "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
      "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    },
    "building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.building_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_building_function = {'$fn': template.element.form_model.post_fn}; \n}"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    }
  },
  {
    "display_name": "Validation Functions",
    "form_info": "<p>Write functions to validate the fields of the forms</p>\n<p>validation_function runs before the element's children; post_validation_function runs afterwards</p>",
    "filters": [
      "Template/template_builder"
    ],
    "expandable": false,
    "key": "local_function",
    "categories": [
      "Developer"
    ],
    "schema": [
      {
        "key": "pre_fn",
        "type": "code_input",
        "templateOptions": {
          "label": "Validation Function",
          "codemirror": {
            "lineNumbers": true,
            "smartIndent": true,
            "mode": "javascript"
          }
        }
      },
      {
        "key": "post_fn",
        "type": "code_input",
        "defaultValue": "{\n}",
        "templateOptions": {
          "label": "Post Validation Function",
          "codemirror": {
            "lineNumbers": true,
            "smartIndent": true,
            "mode": "javascript"
          }
        }
      }
    ],
    "default_model": {
      "pre_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}",
      "post_fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    },
    "building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n \tcurr_obj.validation_function = {'$fn': template.element.form_model.pre_fn};\n \tcurr_obj.post_validation_function = {'$fn': template.element.form_model.post_fn}; \n}"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    }
  },
  {
    "display_name": "Raw Default Values",
    "form_info": "Type raw JSON into here to create default values for the different schemas (referenced by key)",
    "filters": [
      "Template/template_builder"
    ],
    "expandable": false,
    "key": "template_element",
    "categories": [
      "Generic"
    ],
    "schema": [
      {
        "key": "json",
        "type": "code_input",
        "templateOptions": {
          "label": "Model JSON",
          "codemirror": {
            "lineNumbers": true,
            "smartIndent": true,
            "mode": "javascript"
          }
        }
      }
    ],
    "default_model": {
      "json": "{\n\n}"
    },
    "building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.default_model = eval('(' + template.element.form_model.json + ')'); \n}"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    }
  },
  {
    "display_name": "Raw HTML builder",
    "form_info": "Type Raw HTML into here to insert them into the schema",
    "filters": [
      "Template/template_builder",
      "Template/template_builder/**"
    ],
    "expandable": false,
    "key": "template_element",
    "categories": [
      "Layout"
    ],
    "schema": [
      {
        "key": "html",
        "type": "code_input",
        "templateOptions": {
          "label": "HTML template",
          "codemirror": {
            "lineNumbers": true,
            "smartIndent": true,
            "mode": "htmlembedded"
          }
        }
      }
    ],
    "default_model": {
      "html": ""
    },
    "building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.schema.push({template: template.element.form_model.html}); \n}"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    }
  },
  {
    "display_name": "Raw Form JSON",
    "form_info": "Type raw JSON objects into here to insert them into the schema",
    "filters": [
      "Template/template_builder",
      "Template/**/template_builder"
    ],
    "expandable": false,
    "key": "template_element",
    "categories": [
      "Generic"
    ],
    "schema": [
      {
        "key": "json",
        "type": "code_input",
        "templateOptions": {
          "label": "Raw Form JSON",
          "codemirror": {
            "lineNumbers": true,
            "smartIndent": true,
            "mode": "javascript"
          }
        }
      }
    ],
    "default_model": {
      "json": "[\n  {\n    \n  }\n]"
    },
    "building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar obj = eval('(' + template.element.form_model.json + ')'); \n \tfor (i in obj) curr_obj.schema.push(obj[i]); \n}"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    }
  },
  {
    "display_name": "Horizontal Line",
    "form_info": "Insert horizontal line",
    "filters": [
      "Template/template_builder",
      "Template/template_builder/**"
    ],
    "expandable": false,
    "key": "template_element",
    "categories": [
      "Layout"
    ],
    "schema": [],
    "default_model": {
      "html": "<hr/>"
    },
    "building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n curr_obj.schema.push({template: template.element.form_model.html}); \n}"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    }
  },
  {
    "display_name": "Repeating Section",
    "form_info": "Create a sub-form under here",
    "filters": [
      "Template/template_builder",
      "Template/template_builder/**"
    ],
    "expandable": true,
    "key": "template_builder",
    "categories": [
      "Layout"
    ],
    "schema": [
      {
        "key": "key",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Key",
          "placeholder": "Enter a key for this repeater",
          "required": true
        }
      },
      {
        "key": "btnText",
        "type": "horizontalInput",
        "defaultValue": "Add",
        "templateOptions": {
          "label": "Add Button Name",
          "placeholder": "Enter the name for this button",
          "required": true
        }
      }
    ],
    "default_model": {
      "key": "ADD_KEY_HERE",
      "type": "repeatSection",
      "btnText": "Add"
    },
    "building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n  var m = template.element.form_model;\n  var obj = { templateOptions: { schema: [] } }; \n  curr_obj.schema.push(obj); \n  obj.type = m.type; \n  obj.key = m.key; \n  obj.templateOptions.btnText = m.btnText;\n  return obj.templateOptions;   \n}"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n\tvar me = curr_obj.schema[curr_obj.schema.length-1]; \n  me.templateOptions.fields = me.templateOptions.schema;\n  me.templateOptions.schema = undefined;  \n}"
    }
  },
  {
    "display_name": "Row/Column Layout",
    "form_info": "Add a row and define the layout of columns",
    "filters": [
      "Template/template_builder",
      "Template/template_builder/**"
    ],
    "expandable": true,
    "key": "template_builder",
    "categories": [
      "Layout"
    ],
    "schema": [],
    "default_model": {
      "class": "row"
    },
    "building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n var m = template.element.form_model;\n var obj = { schema: [] }; \n curr_obj.schema.push(obj); \n obj.className = m.class; \n return obj; \n}"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var me = curr_obj.schema[curr_obj.schema.length-1]; \n  me.fieldGroup = me.schema;me.schema = undefined;\n}"
    }
  },
  {
    "display_name": "Show/Hide Section",
    "form_info": "The children of this section are hidden based on an expression",
    "filters": [
      "Template/template_builder",
      "Template/**/template_builder"
    ],
    "expandable": true,
    "key": "template_builder",
    "categories": [
      "Layout"
    ],
    "schema": [],
    "building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { hideExpression = template.element.form_model.hideExpression, schema: [] };\n  curr_obj.schema.push(obj);\n  return obj;\n}"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var me = curr_obj.schema[curr_obj.schema.length - 1];\n  me.fieldGroup = me.schema;\n  me.schema = undefined;\n}"
    },
    "default_model": {
      "hideExpression": "false"
    }
  },
  {
    "display_name": "Section header",
    "form_info": "Provides a section header",
    "filters": [
      "Template/template_builder",
      "Template/template_builder/**"
    ],
    "expandable": false,
    "key": "template_element",
    "categories": [
      "Layout"
    ],
    "schema": [
      {
        "templateOptions": {
          "required": true,
          "label": "Horizontal Input",
          "placeholder": "The section header title (in HTML)"
        },
        "key": "_short_name",
        "type": "horizontalInput"
      }
    ],
    "building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  obj = { \n    \"className\": \"section-label\",\n    \"template\": \"<hr /><div><strong>\" + template.element.short_name + \"</strong></div>\"    \n        };\n  curr_obj.schema.push(obj);\n  \n}"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    }
  },
  {
    "display_name": "Horizontal Input",
    "form_info": "Compact text input element",
    "filters": [
      "Template/template_builder",
      "Template/template_builder/**"
    ],
    "expandable": false,
    "key": "simple_input",
    "categories": [
      "Text"
    ],
    "schema": [
      {
        "key": "_short_name",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Label",
          "placeholder": "The label displayed next to the input",
          "required": true
        }
      },
      {
        "key": "_summary",
        "type": "horizontalTextArea",
        "templateOptions": {
          "label": "Placeholder",
          "placeholder": "The placeholder text displayed when the input is empty",
          "required": true
        }
      },
      {
        "key": "key",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Key",
          "pattern": "[a-zA-Z0-9_]+",
          "placeholder": "The key for this input",
          "required": true
        }
      },
      {
        "key": "required",
        "type": "horizontalCheckbox",
        "templateOptions": {
          "label": "Is this element required?"
        }
      },
      {
        "key": "pattern",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Pattern",
          "placeholder": "Optional validation regular expression",
          "required": false
        }
      }
    ],
    "default_model": {
      "type": "horizontalInput",
      "key": "TODO_KEY"
    },
    "building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    }
  },
  {
    "display_name": "Horizontal Checkbox",
    "form_info": "Compact checkbox input element",
    "filters": [
      "Template/template_builder",
      "Template/template_builder/**"
    ],
    "expandable": false,
    "key": "simple_input",
    "categories": [
      "Selection"
    ],
    "schema": [
      {
        "key": "_short_name",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Label",
          "placeholder": "The label displayed next to the input",
          "required": true
        }
      },
      {
        "key": "key",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Key",
          "pattern": "[a-zA-Z0-9_]+",
          "placeholder": "The key for this input",
          "required": true
        }
      }
    ],
    "default_model": {
      "type": "horizontalCheckbox",
      "key": "TODO_KEY"
    },
    "building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.type = template.element.form_model.type; \n  obj.key = template.element.form_model.key;\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    }
  },
  {
    "display_name": "Horizontal Text Area",
    "form_info": "Compact text area input element",
    "filters": [
      "Template/template_builder",
      "Template/template_builder/**"
    ],
    "expandable": false,
    "key": "simple_input",
    "categories": [
      "Text"
    ],
    "schema": [
      {
        "key": "_short_name",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Label",
          "placeholder": "The label displayed next to the input",
          "required": true
        }
      },
      {
        "key": "_summary",
        "type": "horizontalTextArea",
        "templateOptions": {
          "label": "Placeholder",
          "placeholder": "The placeholder text displayed when the input is empty",
          "required": true
        }
      },
      {
        "key": "key",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Key",
          "pattern": "[a-zA-Z0-9_]+",
          "placeholder": "The key for this input",
          "required": true
        }
      },
      {
        "key": "required",
        "type": "horizontalCheckbox",
        "templateOptions": {
          "label": "Is this element required?"
        }
      }
    ],
    "default_model": {
      "type": "horizontalInput",
      "key": "TODO_KEY"
    },
    "building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.key = template.element.form_model.key;\n  obj.type = template.element.form_model.type;   \n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.required = (true === template.element.form_model.required);\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.placeholder = template.element.summary;\n  curr_obj.schema.push(obj)\n}"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    }
  },
  {
    "display_name": "Horizontal Dropdown",
    "form_info": "Compact dropdown element",
    "filters": [
      "Template/template_builder",
      "Template/template_builder/**"
    ],
    "expandable": false,
    "key": "simple_input",
    "categories": [
      "Selection"
    ],
    "schema": [
      {
        "key": "_short_name",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Label",
          "placeholder": "The label displayed next to the input",
          "required": true
        }
      },
      {
        "key": "key",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Key",
          "pattern": "[a-zA-Z0-9_]+",
          "placeholder": "The key for this input",
          "required": true
        }
      },
      {
        "key": "required",
        "type": "horizontalCheckbox",
        "templateOptions": {
          "label": "Is this element required?"
        }
      },
      {
        "className": "section-label",
        "template": "<hr /><div><strong>Dropdown Elements:</strong></div>"
      },
      {
        "templateOptions": {
          "btnText": "Add",
          "fields": [
            {
              "templateOptions": {
                "required": true,
                "label": "Name",
                "placeholder": "The display name associated with the dropdown value"
              },
              "key": "name",
              "type": "horizontalInput"
            },
            {
              "templateOptions": {
                "required": true,
                "pattern": "[a-zA-Z0-9_]+",
                "label": "Value",
                "placeholder": "The key for the selected dropdown element"
              },
              "key": "value",
              "type": "horizontalInput"
            }
          ]
        },
        "type": "repeatSection",
        "key": "options"
      }
    ],
    "default_model": {
      "type": "horizontalSelect",
      "key": "TODO_KEY"
    },
    "building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { templateOptions: {} };\n  obj.type = template.element.form_model.type; \n  obj.key = template.element.form_model.key;\n  obj.templateOptions.required = (true === template.element.form_model.required);\n  if ((template.element.form_model.pattern || '').length > 0) {\n    obj.templateOptions.pattern = template.element.form_model.pattern;\n  }\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.options = template.element.form_model.options;\n  curr_obj.schema.push(obj)\n}"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    }
  },
  {
    "display_name": "Code Editor",
    "form_info": "Write code in various languages (or JSON/XML/HTML)",
    "filters": [
      "Template/template_builder",
      "Template/template_builder/**"
    ],
    "expandable": false,
    "key": "simple_input",
    "categories": [
      "Text"
    ],
    "schema": [
      {
        "key": "_short_name",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Label",
          "placeholder": "The label displayed next to the input",
          "required": true
        }
      },
      {
        "key": "key",
        "type": "horizontalInput",
        "templateOptions": {
          "label": "Key",
          "pattern": "[a-zA-Z0-9_]+",
          "placeholder": "The key for this input",
          "required": true
        }
      },
      {
        "key": "required",
        "type": "horizontalCheckbox",
        "templateOptions": {
          "label": "Is this element required?"
        }
      },
      {
        "templateOptions": {
          "required": true,
          "label": "Language",
          "options": [
            {
              "value": "clike",
              "name": "Scala"
            },
            {
              "value": "javascript",
              "name": "Javascript/JSON"
            },
            {
              "value": "r",
              "name": "R"
            },
            {
              "value": "python",
              "name": "Python"
            },
            {
              "value": "xml",
              "name": "XML"
            },
            {
              "value": "lua",
              "name": "Lua"
            },
            {
              "value": "yaml",
              "name": "YAML"
            },
            {
              "value": "properties",
              "name": "Properties"
            },
            {
              "value": "htmlembedded",
              "name": "HTML (embedded)"
            },
            {
              "value": "htmlmixed",
              "name": "HTML (mixed)"
            }
          ]
        },
        "type": "horizontalSelect",
        "key": "mode"
      }
    ],
    "default_model": {
      "type": "code_input",
      "templateOptions": {
        "codemirror": {
          "lineNumbers": true,
          "smartIndent": true
        }
      }
    },
    "building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  var obj = { \n    type: template.element.form_model.type,\n    templateOptions: template.element.form_model.templateOptions \n  };\n  obj.templateOptions.codemirror.mode = template.element.form_model.mode;\n  obj.templateOptions.label = template.element.short_name;\n  obj.templateOptions.required = template.element.form_model.required;\n  curr_obj.schema.push(obj);\n}"
    },
    "post_building_function": {
      "$fn": "function(errs, template, curr_obj, all_templates, root_obj, hierarchy, rows, cols) {\n  \n}"
    }
  }
]